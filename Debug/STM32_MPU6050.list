
STM32_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008574  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080086fc  080086fc  000186fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008718  08008718  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008718  08008718  00018718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008720  08008720  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008720  08008720  00018720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008724  08008724  00018724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007ec  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000087c  2000087c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b4f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033b1  00000000  00000000  00037c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  0003afc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e00  00000000  00000000  0003bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ce2  00000000  00000000  0003ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013972  00000000  00000000  000619d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9a38  00000000  00000000  00075344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013ed7c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004218  00000000  00000000  0013edd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080086e4 	.word	0x080086e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080086e4 	.word	0x080086e4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <_Z12MPU6050_Initv>:
float Gx;
float Gy;
float Gz;

void MPU6050_Init()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af04      	add	r7, sp, #16
	uint8_t check, Data;

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	9302      	str	r3, [sp, #8]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	9301      	str	r3, [sp, #4]
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2301      	movs	r3, #1
 8000d12:	2275      	movs	r2, #117	; 0x75
 8000d14:	21d0      	movs	r1, #208	; 0xd0
 8000d16:	4823      	ldr	r0, [pc, #140]	; (8000da4 <_Z12MPU6050_Initv+0xa8>)
 8000d18:	f003 f808 	bl	8003d2c <HAL_I2C_Mem_Read>

	if(check == 104)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b68      	cmp	r3, #104	; 0x68
 8000d20:	d13b      	bne.n	8000d9a <_Z12MPU6050_Initv+0x9e>
	{
		Data = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	9302      	str	r3, [sp, #8]
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	1dbb      	adds	r3, r7, #6
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2301      	movs	r3, #1
 8000d36:	226b      	movs	r2, #107	; 0x6b
 8000d38:	21d0      	movs	r1, #208	; 0xd0
 8000d3a:	481a      	ldr	r0, [pc, #104]	; (8000da4 <_Z12MPU6050_Initv+0xa8>)
 8000d3c:	f002 fefc 	bl	8003b38 <HAL_I2C_Mem_Write>

		Data = 0x07;
 8000d40:	2307      	movs	r3, #7
 8000d42:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d48:	9302      	str	r3, [sp, #8]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	1dbb      	adds	r3, r7, #6
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2301      	movs	r3, #1
 8000d54:	2219      	movs	r2, #25
 8000d56:	21d0      	movs	r1, #208	; 0xd0
 8000d58:	4812      	ldr	r0, [pc, #72]	; (8000da4 <_Z12MPU6050_Initv+0xa8>)
 8000d5a:	f002 feed 	bl	8003b38 <HAL_I2C_Mem_Write>

		Data = 0x00;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	9302      	str	r3, [sp, #8]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	1dbb      	adds	r3, r7, #6
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	2301      	movs	r3, #1
 8000d72:	221c      	movs	r2, #28
 8000d74:	21d0      	movs	r1, #208	; 0xd0
 8000d76:	480b      	ldr	r0, [pc, #44]	; (8000da4 <_Z12MPU6050_Initv+0xa8>)
 8000d78:	f002 fede 	bl	8003b38 <HAL_I2C_Mem_Write>

		Data = 0x00;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d84:	9302      	str	r3, [sp, #8]
 8000d86:	2301      	movs	r3, #1
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	1dbb      	adds	r3, r7, #6
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	221b      	movs	r2, #27
 8000d92:	21d0      	movs	r1, #208	; 0xd0
 8000d94:	4803      	ldr	r0, [pc, #12]	; (8000da4 <_Z12MPU6050_Initv+0xa8>)
 8000d96:	f002 fecf 	bl	8003b38 <HAL_I2C_Mem_Write>
	}
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200000ac 	.word	0x200000ac

08000da8 <_Z18MPU6050_Read_Accelv>:

void MPU6050_Read_Accel()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	9302      	str	r3, [sp, #8]
 8000db4:	2306      	movs	r3, #6
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	463b      	mov	r3, r7
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	223b      	movs	r2, #59	; 0x3b
 8000dc0:	21d0      	movs	r1, #208	; 0xd0
 8000dc2:	482f      	ldr	r0, [pc, #188]	; (8000e80 <_Z18MPU6050_Read_Accelv+0xd8>)
 8000dc4:	f002 ffb2 	bl	8003d2c <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000dc8:	783b      	ldrb	r3, [r7, #0]
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	787b      	ldrb	r3, [r7, #1]
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <_Z18MPU6050_Read_Accelv+0xdc>)
 8000dd8:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000dda:	78bb      	ldrb	r3, [r7, #2]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	b21a      	sxth	r2, r3
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <_Z18MPU6050_Read_Accelv+0xe0>)
 8000dea:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000dec:	793b      	ldrb	r3, [r7, #4]
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	797b      	ldrb	r3, [r7, #5]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <_Z18MPU6050_Read_Accelv+0xe4>)
 8000dfc:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;  // get the float g
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <_Z18MPU6050_Read_Accelv+0xdc>)
 8000e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fb31 	bl	800046c <__aeabi_i2d>
 8000e0a:	f04f 0200 	mov.w	r2, #0
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <_Z18MPU6050_Read_Accelv+0xe8>)
 8000e10:	f7ff fcc0 	bl	8000794 <__aeabi_ddiv>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f7ff fda2 	bl	8000964 <__aeabi_d2f>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4a1c      	ldr	r2, [pc, #112]	; (8000e94 <_Z18MPU6050_Read_Accelv+0xec>)
 8000e24:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <_Z18MPU6050_Read_Accelv+0xe0>)
 8000e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fb1d 	bl	800046c <__aeabi_i2d>
 8000e32:	f04f 0200 	mov.w	r2, #0
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <_Z18MPU6050_Read_Accelv+0xe8>)
 8000e38:	f7ff fcac 	bl	8000794 <__aeabi_ddiv>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4610      	mov	r0, r2
 8000e42:	4619      	mov	r1, r3
 8000e44:	f7ff fd8e 	bl	8000964 <__aeabi_d2f>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a13      	ldr	r2, [pc, #76]	; (8000e98 <_Z18MPU6050_Read_Accelv+0xf0>)
 8000e4c:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <_Z18MPU6050_Read_Accelv+0xe4>)
 8000e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fb09 	bl	800046c <__aeabi_i2d>
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <_Z18MPU6050_Read_Accelv+0xe8>)
 8000e60:	f7ff fc98 	bl	8000794 <__aeabi_ddiv>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f7ff fd7a 	bl	8000964 <__aeabi_d2f>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <_Z18MPU6050_Read_Accelv+0xf4>)
 8000e74:	6013      	str	r3, [r2, #0]
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000ac 	.word	0x200000ac
 8000e84:	20000158 	.word	0x20000158
 8000e88:	2000015a 	.word	0x2000015a
 8000e8c:	2000015c 	.word	0x2000015c
 8000e90:	40d00000 	.word	0x40d00000
 8000e94:	20000164 	.word	0x20000164
 8000e98:	20000168 	.word	0x20000168
 8000e9c:	2000016c 	.word	0x2000016c

08000ea0 <_Z17MPU6050_Read_Gyrov>:

void MPU6050_Read_Gyro()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	9302      	str	r3, [sp, #8]
 8000eac:	2306      	movs	r3, #6
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	2243      	movs	r2, #67	; 0x43
 8000eb8:	21d0      	movs	r1, #208	; 0xd0
 8000eba:	4831      	ldr	r0, [pc, #196]	; (8000f80 <_Z17MPU6050_Read_Gyrov+0xe0>)
 8000ebc:	f002 ff36 	bl	8003d2c <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000ec0:	783b      	ldrb	r3, [r7, #0]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	787b      	ldrb	r3, [r7, #1]
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <_Z17MPU6050_Read_Gyrov+0xe4>)
 8000ed0:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000ed2:	78bb      	ldrb	r3, [r7, #2]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <_Z17MPU6050_Read_Gyrov+0xe8>)
 8000ee2:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000ee4:	793b      	ldrb	r3, [r7, #4]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	797b      	ldrb	r3, [r7, #5]
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <_Z17MPU6050_Read_Gyrov+0xec>)
 8000ef4:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8000ef6:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <_Z17MPU6050_Read_Gyrov+0xe4>)
 8000ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fab5 	bl	800046c <__aeabi_i2d>
 8000f02:	a31d      	add	r3, pc, #116	; (adr r3, 8000f78 <_Z17MPU6050_Read_Gyrov+0xd8>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	f7ff fc44 	bl	8000794 <__aeabi_ddiv>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4610      	mov	r0, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	f7ff fd26 	bl	8000964 <__aeabi_d2f>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <_Z17MPU6050_Read_Gyrov+0xf0>)
 8000f1c:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <_Z17MPU6050_Read_Gyrov+0xe8>)
 8000f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff faa1 	bl	800046c <__aeabi_i2d>
 8000f2a:	a313      	add	r3, pc, #76	; (adr r3, 8000f78 <_Z17MPU6050_Read_Gyrov+0xd8>)
 8000f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f30:	f7ff fc30 	bl	8000794 <__aeabi_ddiv>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f7ff fd12 	bl	8000964 <__aeabi_d2f>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_Z17MPU6050_Read_Gyrov+0xf4>)
 8000f44:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <_Z17MPU6050_Read_Gyrov+0xec>)
 8000f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fa8d 	bl	800046c <__aeabi_i2d>
 8000f52:	a309      	add	r3, pc, #36	; (adr r3, 8000f78 <_Z17MPU6050_Read_Gyrov+0xd8>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	f7ff fc1c 	bl	8000794 <__aeabi_ddiv>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fcfe 	bl	8000964 <__aeabi_d2f>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <_Z17MPU6050_Read_Gyrov+0xf8>)
 8000f6c:	6013      	str	r3, [r2, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	00000000 	.word	0x00000000
 8000f7c:	40606000 	.word	0x40606000
 8000f80:	200000ac 	.word	0x200000ac
 8000f84:	2000015e 	.word	0x2000015e
 8000f88:	20000160 	.word	0x20000160
 8000f8c:	20000162 	.word	0x20000162
 8000f90:	20000170 	.word	0x20000170
 8000f94:	20000174 	.word	0x20000174
 8000f98:	20000178 	.word	0x20000178

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa0:	f000 fbc4 	bl	800172c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa4:	f000 f85a 	bl	800105c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa8:	f000 f93c 	bl	8001224 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000fac:	f000 f8ca 	bl	8001144 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8000fb0:	f000 f8fc 	bl	80011ac <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 8000fb4:	f006 ff84 	bl	8007ec0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8000fb8:	f7ff fea0 	bl	8000cfc <_Z12MPU6050_Initv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000fbc:	f006 ffa6 	bl	8007f0c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    MPU6050_Read_Accel();
 8000fc0:	f7ff fef2 	bl	8000da8 <_Z18MPU6050_Read_Accelv>
    MPU6050_Read_Gyro();
 8000fc4:	f7ff ff6c 	bl	8000ea0 <_Z17MPU6050_Read_Gyrov>

    if(Ax > 0)
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <main+0xb4>)
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd6:	dd0c      	ble.n	8000ff2 <main+0x56>
    {
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fde:	481d      	ldr	r0, [pc, #116]	; (8001054 <main+0xb8>)
 8000fe0:	f000 fee8 	bl	8001db4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fea:	481a      	ldr	r0, [pc, #104]	; (8001054 <main+0xb8>)
 8000fec:	f000 fee2 	bl	8001db4 <HAL_GPIO_WritePin>
 8000ff0:	e00b      	b.n	800100a <main+0x6e>
    }
    else
    {
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff8:	4816      	ldr	r0, [pc, #88]	; (8001054 <main+0xb8>)
 8000ffa:	f000 fedb 	bl	8001db4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001004:	4813      	ldr	r0, [pc, #76]	; (8001054 <main+0xb8>)
 8001006:	f000 fed5 	bl	8001db4 <HAL_GPIO_WritePin>
    }

    if(Ay > 0)
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <main+0xbc>)
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001018:	dd0c      	ble.n	8001034 <main+0x98>
	{
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <main+0xb8>)
 8001022:	f000 fec7 	bl	8001db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <main+0xb8>)
 800102e:	f000 fec1 	bl	8001db4 <HAL_GPIO_WritePin>
 8001032:	e7c3      	b.n	8000fbc <main+0x20>
	}
	else
	{
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <main+0xb8>)
 800103c:	f000 feba 	bl	8001db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001046:	4803      	ldr	r0, [pc, #12]	; (8001054 <main+0xb8>)
 8001048:	f000 feb4 	bl	8001db4 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 800104c:	e7b6      	b.n	8000fbc <main+0x20>
 800104e:	bf00      	nop
 8001050:	20000164 	.word	0x20000164
 8001054:	40020c00 	.word	0x40020c00
 8001058:	20000168 	.word	0x20000168

0800105c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2230      	movs	r2, #48	; 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f007 fa6a 	bl	8008544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b2d      	ldr	r3, [pc, #180]	; (800113c <_Z18SystemClock_Configv+0xe0>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a2c      	ldr	r2, [pc, #176]	; (800113c <_Z18SystemClock_Configv+0xe0>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <_Z18SystemClock_Configv+0xe0>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b27      	ldr	r3, [pc, #156]	; (8001140 <_Z18SystemClock_Configv+0xe4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a26      	ldr	r2, [pc, #152]	; (8001140 <_Z18SystemClock_Configv+0xe4>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <_Z18SystemClock_Configv+0xe4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b8:	2301      	movs	r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010cc:	2304      	movs	r3, #4
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010d0:	23a8      	movs	r3, #168	; 0xa8
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010d8:	2307      	movs	r3, #7
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 fba5 	bl	8004830 <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	bf14      	ite	ne
 80010ec:	2301      	movne	r3, #1
 80010ee:	2300      	moveq	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80010f6:	f000 f9b5 	bl	8001464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fa:	230f      	movs	r3, #15
 80010fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fe:	2302      	movs	r3, #2
 8001100:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001106:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800110a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001110:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	2105      	movs	r1, #5
 8001118:	4618      	mov	r0, r3
 800111a:	f003 fe01 	bl	8004d20 <HAL_RCC_ClockConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	bf14      	ite	ne
 8001124:	2301      	movne	r3, #1
 8001126:	2300      	moveq	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800112e:	f000 f999 	bl	8001464 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3750      	adds	r7, #80	; 0x50
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800114a:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <_ZL12MX_I2C1_Initv+0x60>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001150:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <_ZL12MX_I2C1_Initv+0x64>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001162:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001166:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001180:	4807      	ldr	r0, [pc, #28]	; (80011a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001182:	f002 fb95 	bl	80038b0 <HAL_I2C_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	bf14      	ite	ne
 800118c:	2301      	movne	r3, #1
 800118e:	2300      	moveq	r3, #0
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001196:	f000 f965 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200000ac 	.word	0x200000ac
 80011a4:	40005400 	.word	0x40005400
 80011a8:	000186a0 	.word	0x000186a0

080011ac <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	; (800121c <_ZL12MX_SPI1_Initv+0x70>)
 80011b2:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <_ZL12MX_SPI1_Initv+0x74>)
 80011b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <_ZL12MX_SPI1_Initv+0x70>)
 80011b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <_ZL12MX_SPI1_Initv+0x70>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <_ZL12MX_SPI1_Initv+0x70>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <_ZL12MX_SPI1_Initv+0x70>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <_ZL12MX_SPI1_Initv+0x70>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <_ZL12MX_SPI1_Initv+0x70>)
 80011d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <_ZL12MX_SPI1_Initv+0x70>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <_ZL12MX_SPI1_Initv+0x70>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <_ZL12MX_SPI1_Initv+0x70>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <_ZL12MX_SPI1_Initv+0x70>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <_ZL12MX_SPI1_Initv+0x70>)
 80011f8:	220a      	movs	r2, #10
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011fc:	4807      	ldr	r0, [pc, #28]	; (800121c <_ZL12MX_SPI1_Initv+0x70>)
 80011fe:	f003 ff77 	bl	80050f0 <HAL_SPI_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf14      	ite	ne
 8001208:	2301      	movne	r3, #1
 800120a:	2300      	moveq	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001212:	f000 f927 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000100 	.word	0x20000100
 8001220:	40013000 	.word	0x40013000

08001224 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	4b82      	ldr	r3, [pc, #520]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a81      	ldr	r2, [pc, #516]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b7f      	ldr	r3, [pc, #508]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	4b7b      	ldr	r3, [pc, #492]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a7a      	ldr	r2, [pc, #488]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b78      	ldr	r3, [pc, #480]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b74      	ldr	r3, [pc, #464]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a73      	ldr	r2, [pc, #460]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b71      	ldr	r3, [pc, #452]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b6d      	ldr	r3, [pc, #436]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a6c      	ldr	r2, [pc, #432]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b6a      	ldr	r3, [pc, #424]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b66      	ldr	r3, [pc, #408]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a65      	ldr	r2, [pc, #404]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b63      	ldr	r3, [pc, #396]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b5f      	ldr	r3, [pc, #380]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a5e      	ldr	r2, [pc, #376]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b5c      	ldr	r3, [pc, #368]	; (8001448 <_ZL12MX_GPIO_Initv+0x224>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	2101      	movs	r1, #1
 80012e6:	4859      	ldr	r0, [pc, #356]	; (800144c <_ZL12MX_GPIO_Initv+0x228>)
 80012e8:	f000 fd64 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f2:	4857      	ldr	r0, [pc, #348]	; (8001450 <_ZL12MX_GPIO_Initv+0x22c>)
 80012f4:	f000 fd5e 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012f8:	2200      	movs	r2, #0
 80012fa:	f24f 0110 	movw	r1, #61456	; 0xf010
 80012fe:	4855      	ldr	r0, [pc, #340]	; (8001454 <_ZL12MX_GPIO_Initv+0x230>)
 8001300:	f000 fd58 	bl	8001db4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001304:	2301      	movs	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	484c      	ldr	r0, [pc, #304]	; (800144c <_ZL12MX_GPIO_Initv+0x228>)
 800131c:	f000 fbae 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001320:	2308      	movs	r3, #8
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001330:	2305      	movs	r3, #5
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	4844      	ldr	r0, [pc, #272]	; (800144c <_ZL12MX_GPIO_Initv+0x228>)
 800133c:	f000 fb9e 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001340:	2310      	movs	r3, #16
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001350:	2306      	movs	r3, #6
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	483f      	ldr	r0, [pc, #252]	; (8001458 <_ZL12MX_GPIO_Initv+0x234>)
 800135c:	f000 fb8e 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001360:	2301      	movs	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001364:	4b3d      	ldr	r3, [pc, #244]	; (800145c <_ZL12MX_GPIO_Initv+0x238>)
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	483b      	ldr	r0, [pc, #236]	; (8001460 <_ZL12MX_GPIO_Initv+0x23c>)
 8001374:	f000 fb82 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001378:	2304      	movs	r3, #4
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	4835      	ldr	r0, [pc, #212]	; (8001460 <_ZL12MX_GPIO_Initv+0x23c>)
 800138c:	f000 fb76 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4829      	ldr	r0, [pc, #164]	; (8001450 <_ZL12MX_GPIO_Initv+0x22c>)
 80013aa:	f000 fb67 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80013ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013c0:	2305      	movs	r3, #5
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	4825      	ldr	r0, [pc, #148]	; (8001460 <_ZL12MX_GPIO_Initv+0x23c>)
 80013cc:	f000 fb56 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013d0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80013d4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	481a      	ldr	r0, [pc, #104]	; (8001454 <_ZL12MX_GPIO_Initv+0x230>)
 80013ea:	f000 fb47 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013ee:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001400:	2306      	movs	r3, #6
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	4810      	ldr	r0, [pc, #64]	; (800144c <_ZL12MX_GPIO_Initv+0x228>)
 800140c:	f000 fb36 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001410:	2320      	movs	r3, #32
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4619      	mov	r1, r3
 8001422:	480c      	ldr	r0, [pc, #48]	; (8001454 <_ZL12MX_GPIO_Initv+0x230>)
 8001424:	f000 fb2a 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001428:	2302      	movs	r3, #2
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <_ZL12MX_GPIO_Initv+0x238>)
 800142e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <_ZL12MX_GPIO_Initv+0x22c>)
 800143c:	f000 fb1e 	bl	8001a7c <HAL_GPIO_Init>

}
 8001440:	bf00      	nop
 8001442:	3730      	adds	r7, #48	; 0x30
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800
 800144c:	40020800 	.word	0x40020800
 8001450:	40021000 	.word	0x40021000
 8001454:	40020c00 	.word	0x40020c00
 8001458:	40020000 	.word	0x40020000
 800145c:	10120000 	.word	0x10120000
 8001460:	40020400 	.word	0x40020400

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146c:	e7fe      	b.n	800146c <Error_Handler+0x8>
	...

08001470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_MspInit+0x4c>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <HAL_MspInit+0x4c>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001484:	6453      	str	r3, [r2, #68]	; 0x44
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_MspInit+0x4c>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_MspInit+0x4c>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a08      	ldr	r2, [pc, #32]	; (80014bc <HAL_MspInit+0x4c>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_MspInit+0x4c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ae:	2007      	movs	r0, #7
 80014b0:	f000 faa2 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a19      	ldr	r2, [pc, #100]	; (8001544 <HAL_I2C_MspInit+0x84>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d12c      	bne.n	800153c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_I2C_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a17      	ldr	r2, [pc, #92]	; (8001548 <HAL_I2C_MspInit+0x88>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_I2C_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80014fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001504:	2312      	movs	r3, #18
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001510:	2304      	movs	r3, #4
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <HAL_I2C_MspInit+0x8c>)
 800151c:	f000 faae 	bl	8001a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_I2C_MspInit+0x88>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_I2C_MspInit+0x88>)
 800152a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_I2C_MspInit+0x88>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40005400 	.word	0x40005400
 8001548:	40023800 	.word	0x40023800
 800154c:	40020400 	.word	0x40020400

08001550 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <HAL_SPI_MspInit+0x84>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d12b      	bne.n	80015ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_SPI_MspInit+0x88>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <HAL_SPI_MspInit+0x88>)
 800157c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_SPI_MspInit+0x88>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_SPI_MspInit+0x88>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_SPI_MspInit+0x88>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_SPI_MspInit+0x88>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80015aa:	23e0      	movs	r3, #224	; 0xe0
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ba:	2305      	movs	r3, #5
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <HAL_SPI_MspInit+0x8c>)
 80015c6:	f000 fa59 	bl	8001a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40013000 	.word	0x40013000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162c:	f000 f8d0 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <OTG_FS_IRQHandler+0x10>)
 800163a:	f000 fe3f 	bl	80022bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000568 	.word	0x20000568

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d207      	bcs.n	8001688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001678:	f006 ff2a 	bl	80084d0 <__errno>
 800167c:	4603      	mov	r3, r0
 800167e:	220c      	movs	r2, #12
 8001680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	e009      	b.n	800169c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <_sbrk+0x64>)
 8001698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20020000 	.word	0x20020000
 80016a8:	00000400 	.word	0x00000400
 80016ac:	2000017c 	.word	0x2000017c
 80016b0:	20000880 	.word	0x20000880

080016b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <SystemInit+0x20>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <SystemInit+0x20>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001710 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016de:	490e      	ldr	r1, [pc, #56]	; (8001718 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016f4:	4c0b      	ldr	r4, [pc, #44]	; (8001724 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001702:	f7ff ffd7 	bl	80016b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001706:	f006 fee9 	bl	80084dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170a:	f7ff fc47 	bl	8000f9c <main>
  bx  lr    
 800170e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800171c:	08008728 	.word	0x08008728
  ldr r2, =_sbss
 8001720:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001724:	2000087c 	.word	0x2000087c

08001728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC_IRQHandler>
	...

0800172c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <HAL_Init+0x40>)
 8001736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_Init+0x40>)
 8001742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_Init+0x40>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 f94f 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175a:	2000      	movs	r0, #0
 800175c:	f000 f808 	bl	8001770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001760:	f7ff fe86 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023c00 	.word	0x40023c00

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x54>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x58>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001786:	fbb3 f3f1 	udiv	r3, r3, r1
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f967 	bl	8001a62 <HAL_SYSTICK_Config>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e00e      	b.n	80017bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d80a      	bhi.n	80017ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 f92f 	bl	8001a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <HAL_InitTick+0x5c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e000      	b.n	80017bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20000004 	.word	0x20000004

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008
 80017f4:	2000018c 	.word	0x2000018c

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000018c 	.word	0x2000018c

08001810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff ffee 	bl	80017f8 <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d005      	beq.n	8001836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_Delay+0x44>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001836:	bf00      	nop
 8001838:	f7ff ffde 	bl	80017f8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d8f7      	bhi.n	8001838 <HAL_Delay+0x28>
  {
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000008 	.word	0x20000008

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db0b      	blt.n	80018e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	4907      	ldr	r1, [pc, #28]	; (80018f4 <__NVIC_EnableIRQ+0x38>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	2001      	movs	r0, #1
 80018de:	fa00 f202 	lsl.w	r2, r0, r2
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	; (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	; (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c4:	d301      	bcc.n	80019ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00f      	b.n	80019ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <SysTick_Config+0x40>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d2:	210f      	movs	r1, #15
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f7ff ff8e 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <SysTick_Config+0x40>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <SysTick_Config+0x40>)
 80019e4:	2207      	movs	r2, #7
 80019e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	e000e010 	.word	0xe000e010

080019f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff29 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a20:	f7ff ff3e 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 8001a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f7ff ff8e 	bl	800194c <NVIC_EncodePriority>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff5d 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff31 	bl	80018bc <__NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffa2 	bl	80019b4 <SysTick_Config>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e16b      	b.n	8001d70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f040 815a 	bne.w	8001d6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d005      	beq.n	8001ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d130      	bne.n	8001b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 0201 	and.w	r2, r3, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d017      	beq.n	8001b6c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d123      	bne.n	8001bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0203 	and.w	r2, r3, #3
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80b4 	beq.w	8001d6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b60      	ldr	r3, [pc, #384]	; (8001d88 <HAL_GPIO_Init+0x30c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a5f      	ldr	r2, [pc, #380]	; (8001d88 <HAL_GPIO_Init+0x30c>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b5d      	ldr	r3, [pc, #372]	; (8001d88 <HAL_GPIO_Init+0x30c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1e:	4a5b      	ldr	r2, [pc, #364]	; (8001d8c <HAL_GPIO_Init+0x310>)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_GPIO_Init+0x314>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d02b      	beq.n	8001ca2 <HAL_GPIO_Init+0x226>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a51      	ldr	r2, [pc, #324]	; (8001d94 <HAL_GPIO_Init+0x318>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d025      	beq.n	8001c9e <HAL_GPIO_Init+0x222>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a50      	ldr	r2, [pc, #320]	; (8001d98 <HAL_GPIO_Init+0x31c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d01f      	beq.n	8001c9a <HAL_GPIO_Init+0x21e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4f      	ldr	r2, [pc, #316]	; (8001d9c <HAL_GPIO_Init+0x320>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d019      	beq.n	8001c96 <HAL_GPIO_Init+0x21a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4e      	ldr	r2, [pc, #312]	; (8001da0 <HAL_GPIO_Init+0x324>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0x216>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4d      	ldr	r2, [pc, #308]	; (8001da4 <HAL_GPIO_Init+0x328>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00d      	beq.n	8001c8e <HAL_GPIO_Init+0x212>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4c      	ldr	r2, [pc, #304]	; (8001da8 <HAL_GPIO_Init+0x32c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <HAL_GPIO_Init+0x20e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4b      	ldr	r2, [pc, #300]	; (8001dac <HAL_GPIO_Init+0x330>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_GPIO_Init+0x20a>
 8001c82:	2307      	movs	r3, #7
 8001c84:	e00e      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c86:	2308      	movs	r3, #8
 8001c88:	e00c      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	e00a      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c8e:	2305      	movs	r3, #5
 8001c90:	e008      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e004      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f002 0203 	and.w	r2, r2, #3
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	4093      	lsls	r3, r2
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb4:	4935      	ldr	r1, [pc, #212]	; (8001d8c <HAL_GPIO_Init+0x310>)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce6:	4a32      	ldr	r2, [pc, #200]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cec:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d10:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d3a:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d64:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b0f      	cmp	r3, #15
 8001d74:	f67f ae90 	bls.w	8001a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40020400 	.word	0x40020400
 8001d98:	40020800 	.word	0x40020800
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40021400 	.word	0x40021400
 8001da8:	40021800 	.word	0x40021800
 8001dac:	40021c00 	.word	0x40021c00
 8001db0:	40013c00 	.word	0x40013c00

08001db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc4:	787b      	ldrb	r3, [r7, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd0:	e003      	b.n	8001dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	041a      	lsls	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	619a      	str	r2, [r3, #24]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001de6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de8:	b08f      	sub	sp, #60	; 0x3c
 8001dea:	af0a      	add	r7, sp, #40	; 0x28
 8001dec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e054      	b.n	8001ea2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f006 f8b2 	bl	8007f7c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 fa55 	bl	80052e6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	687e      	ldr	r6, [r7, #4]
 8001e44:	466d      	mov	r5, sp
 8001e46:	f106 0410 	add.w	r4, r6, #16
 8001e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e5a:	1d33      	adds	r3, r6, #4
 8001e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e5e:	6838      	ldr	r0, [r7, #0]
 8001e60:	f003 f9cf 	bl	8005202 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 fa4c 	bl	8005308 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	687e      	ldr	r6, [r7, #4]
 8001e78:	466d      	mov	r5, sp
 8001e7a:	f106 0410 	add.w	r4, r6, #16
 8001e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e8e:	1d33      	adds	r3, r6, #4
 8001e90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e92:	6838      	ldr	r0, [r7, #0]
 8001e94:	f003 fb5e 	bl	8005554 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eaa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001eaa:	b590      	push	{r4, r7, lr}
 8001eac:	b089      	sub	sp, #36	; 0x24
 8001eae:	af04      	add	r7, sp, #16
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	4608      	mov	r0, r1
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4603      	mov	r3, r0
 8001eba:	70fb      	strb	r3, [r7, #3]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70bb      	strb	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_HCD_HC_Init+0x28>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e076      	b.n	8001fc0 <HAL_HCD_HC_Init+0x116>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	212c      	movs	r1, #44	; 0x2c
 8001ee0:	fb01 f303 	mul.w	r3, r1, r3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	333d      	adds	r3, #61	; 0x3d
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	212c      	movs	r1, #44	; 0x2c
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3338      	adds	r3, #56	; 0x38
 8001efa:	787a      	ldrb	r2, [r7, #1]
 8001efc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	212c      	movs	r1, #44	; 0x2c
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	4413      	add	r3, r2
 8001f0a:	3340      	adds	r3, #64	; 0x40
 8001f0c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f0e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	212c      	movs	r1, #44	; 0x2c
 8001f16:	fb01 f303 	mul.w	r3, r1, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3339      	adds	r3, #57	; 0x39
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	212c      	movs	r1, #44	; 0x2c
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	333f      	adds	r3, #63	; 0x3f
 8001f30:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	78ba      	ldrb	r2, [r7, #2]
 8001f3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f3e:	b2d0      	uxtb	r0, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	333a      	adds	r3, #58	; 0x3a
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	da09      	bge.n	8001f6c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	212c      	movs	r1, #44	; 0x2c
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	4413      	add	r3, r2
 8001f64:	333b      	adds	r3, #59	; 0x3b
 8001f66:	2201      	movs	r2, #1
 8001f68:	701a      	strb	r2, [r3, #0]
 8001f6a:	e008      	b.n	8001f7e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	212c      	movs	r1, #44	; 0x2c
 8001f72:	fb01 f303 	mul.w	r3, r1, r3
 8001f76:	4413      	add	r3, r2
 8001f78:	333b      	adds	r3, #59	; 0x3b
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	333c      	adds	r3, #60	; 0x3c
 8001f8c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f90:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	787c      	ldrb	r4, [r7, #1]
 8001f98:	78ba      	ldrb	r2, [r7, #2]
 8001f9a:	78f9      	ldrb	r1, [r7, #3]
 8001f9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f9e:	9302      	str	r3, [sp, #8]
 8001fa0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	4623      	mov	r3, r4
 8001fae:	f003 fc53 	bl	8005858 <USB_HC_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd90      	pop	{r4, r7, pc}

08001fc8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_HCD_HC_Halt+0x1e>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e00f      	b.n	8002006 <HAL_HCD_HC_Halt+0x3e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 fe8f 	bl	8005d1a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	4608      	mov	r0, r1
 800201a:	4611      	mov	r1, r2
 800201c:	461a      	mov	r2, r3
 800201e:	4603      	mov	r3, r0
 8002020:	70fb      	strb	r3, [r7, #3]
 8002022:	460b      	mov	r3, r1
 8002024:	70bb      	strb	r3, [r7, #2]
 8002026:	4613      	mov	r3, r2
 8002028:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	333b      	adds	r3, #59	; 0x3b
 8002038:	78ba      	ldrb	r2, [r7, #2]
 800203a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	333f      	adds	r3, #63	; 0x3f
 800204a:	787a      	ldrb	r2, [r7, #1]
 800204c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800204e:	7c3b      	ldrb	r3, [r7, #16]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d112      	bne.n	800207a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	3342      	adds	r3, #66	; 0x42
 8002062:	2203      	movs	r2, #3
 8002064:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	333d      	adds	r3, #61	; 0x3d
 8002074:	7f3a      	ldrb	r2, [r7, #28]
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e008      	b.n	800208c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	3342      	adds	r3, #66	; 0x42
 8002088:	2202      	movs	r2, #2
 800208a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800208c:	787b      	ldrb	r3, [r7, #1]
 800208e:	2b03      	cmp	r3, #3
 8002090:	f200 80c6 	bhi.w	8002220 <HAL_HCD_HC_SubmitRequest+0x210>
 8002094:	a201      	add	r2, pc, #4	; (adr r2, 800209c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209a:	bf00      	nop
 800209c:	080020ad 	.word	0x080020ad
 80020a0:	0800220d 	.word	0x0800220d
 80020a4:	08002111 	.word	0x08002111
 80020a8:	0800218f 	.word	0x0800218f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80020ac:	7c3b      	ldrb	r3, [r7, #16]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	f040 80b8 	bne.w	8002224 <HAL_HCD_HC_SubmitRequest+0x214>
 80020b4:	78bb      	ldrb	r3, [r7, #2]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 80b4 	bne.w	8002224 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80020bc:	8b3b      	ldrh	r3, [r7, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d108      	bne.n	80020d4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	212c      	movs	r1, #44	; 0x2c
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	3355      	adds	r3, #85	; 0x55
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3355      	adds	r3, #85	; 0x55
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d109      	bne.n	80020fc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	3342      	adds	r3, #66	; 0x42
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020fa:	e093      	b.n	8002224 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3342      	adds	r3, #66	; 0x42
 800210a:	2202      	movs	r2, #2
 800210c:	701a      	strb	r2, [r3, #0]
      break;
 800210e:	e089      	b.n	8002224 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002110:	78bb      	ldrb	r3, [r7, #2]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d11d      	bne.n	8002152 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	212c      	movs	r1, #44	; 0x2c
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	4413      	add	r3, r2
 8002122:	3355      	adds	r3, #85	; 0x55
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	212c      	movs	r1, #44	; 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	3342      	adds	r3, #66	; 0x42
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800213c:	e073      	b.n	8002226 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3342      	adds	r3, #66	; 0x42
 800214c:	2202      	movs	r2, #2
 800214e:	701a      	strb	r2, [r3, #0]
      break;
 8002150:	e069      	b.n	8002226 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	212c      	movs	r1, #44	; 0x2c
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	4413      	add	r3, r2
 800215e:	3354      	adds	r3, #84	; 0x54
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3342      	adds	r3, #66	; 0x42
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
      break;
 8002178:	e055      	b.n	8002226 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3342      	adds	r3, #66	; 0x42
 8002188:	2202      	movs	r2, #2
 800218a:	701a      	strb	r2, [r3, #0]
      break;
 800218c:	e04b      	b.n	8002226 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800218e:	78bb      	ldrb	r3, [r7, #2]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d11d      	bne.n	80021d0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	212c      	movs	r1, #44	; 0x2c
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	3355      	adds	r3, #85	; 0x55
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	212c      	movs	r1, #44	; 0x2c
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	4413      	add	r3, r2
 80021b4:	3342      	adds	r3, #66	; 0x42
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021ba:	e034      	b.n	8002226 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3342      	adds	r3, #66	; 0x42
 80021ca:	2202      	movs	r2, #2
 80021cc:	701a      	strb	r2, [r3, #0]
      break;
 80021ce:	e02a      	b.n	8002226 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	3354      	adds	r3, #84	; 0x54
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3342      	adds	r3, #66	; 0x42
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
      break;
 80021f6:	e016      	b.n	8002226 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3342      	adds	r3, #66	; 0x42
 8002206:	2202      	movs	r2, #2
 8002208:	701a      	strb	r2, [r3, #0]
      break;
 800220a:	e00c      	b.n	8002226 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3342      	adds	r3, #66	; 0x42
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
      break;
 800221e:	e002      	b.n	8002226 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002220:	bf00      	nop
 8002222:	e000      	b.n	8002226 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002224:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002226:	78fb      	ldrb	r3, [r7, #3]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	3344      	adds	r3, #68	; 0x44
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	8b3a      	ldrh	r2, [r7, #24]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	202c      	movs	r0, #44	; 0x2c
 8002240:	fb00 f303 	mul.w	r3, r0, r3
 8002244:	440b      	add	r3, r1
 8002246:	334c      	adds	r3, #76	; 0x4c
 8002248:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800224a:	78fb      	ldrb	r3, [r7, #3]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	212c      	movs	r1, #44	; 0x2c
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	4413      	add	r3, r2
 8002256:	3360      	adds	r3, #96	; 0x60
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	212c      	movs	r1, #44	; 0x2c
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	4413      	add	r3, r2
 8002268:	3350      	adds	r3, #80	; 0x50
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	212c      	movs	r1, #44	; 0x2c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	3339      	adds	r3, #57	; 0x39
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3361      	adds	r3, #97	; 0x61
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	222c      	movs	r2, #44	; 0x2c
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	3338      	adds	r3, #56	; 0x38
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	18d1      	adds	r1, r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	f003 fbe2 	bl	8005a74 <USB_HC_StartXfer>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop

080022bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 f8fb 	bl	80054ce <USB_GetMode>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b01      	cmp	r3, #1
 80022dc:	f040 80ef 	bne.w	80024be <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 f8df 	bl	80054a8 <USB_ReadInterrupts>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80e5 	beq.w	80024bc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 f8d6 	bl	80054a8 <USB_ReadInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002306:	d104      	bne.n	8002312 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002310:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f003 f8c6 	bl	80054a8 <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002326:	d104      	bne.n	8002332 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002330:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f003 f8b6 	bl	80054a8 <USB_ReadInterrupts>
 800233c:	4603      	mov	r3, r0
 800233e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002342:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002346:	d104      	bne.n	8002352 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002350:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 f8a6 	bl	80054a8 <USB_ReadInterrupts>
 800235c:	4603      	mov	r3, r0
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b02      	cmp	r3, #2
 8002364:	d103      	bne.n	800236e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2202      	movs	r2, #2
 800236c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f003 f898 	bl	80054a8 <USB_ReadInterrupts>
 8002378:	4603      	mov	r3, r0
 800237a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800237e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002382:	d115      	bne.n	80023b0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800238c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d108      	bne.n	80023b0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f005 fe6a 	bl	8008078 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2101      	movs	r1, #1
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 f98e 	bl	80056cc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f003 f877 	bl	80054a8 <USB_ReadInterrupts>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c4:	d102      	bne.n	80023cc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f001 f9ff 	bl	80037ca <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 f869 	bl	80054a8 <USB_ReadInterrupts>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d106      	bne.n	80023ee <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f005 fe2d 	bl	8008040 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2208      	movs	r2, #8
 80023ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 f858 	bl	80054a8 <USB_ReadInterrupts>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d101      	bne.n	8002406 <HAL_HCD_IRQHandler+0x14a>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_HCD_IRQHandler+0x14c>
 8002406:	2300      	movs	r3, #0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d012      	beq.n	8002432 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0210 	bic.w	r2, r2, #16
 800241a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f001 f902 	bl	8003626 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699a      	ldr	r2, [r3, #24]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0210 	orr.w	r2, r2, #16
 8002430:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f003 f836 	bl	80054a8 <USB_ReadInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002446:	d13a      	bne.n	80024be <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f003 fc53 	bl	8005cf8 <USB_HC_ReadInterrupt>
 8002452:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	e025      	b.n	80024a6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d018      	beq.n	80024a0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002484:	d106      	bne.n	8002494 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4619      	mov	r1, r3
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f8ab 	bl	80025e8 <HCD_HC_IN_IRQHandler>
 8002492:	e005      	b.n	80024a0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	4619      	mov	r1, r3
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fcc6 	bl	8002e2c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3301      	adds	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d3d4      	bcc.n	800245a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b8:	615a      	str	r2, [r3, #20]
 80024ba:	e000      	b.n	80024be <HAL_HCD_IRQHandler+0x202>
      return;
 80024bc:	bf00      	nop
    }
  }
}
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_HCD_Start+0x16>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e013      	b.n	8002502 <HAL_HCD_Start+0x3e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 feec 	bl	80052c4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2101      	movs	r1, #1
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 f94e 	bl	8005794 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_HCD_Stop+0x16>
 800251c:	2302      	movs	r3, #2
 800251e:	e00d      	b.n	800253c <HAL_HCD_Stop+0x32>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f003 fd4d 	bl	8005fcc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f003 f8f5 	bl	8005740 <USB_ResetPort>
 8002556:	4603      	mov	r3, r0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3360      	adds	r3, #96	; 0x60
 800257a:	781b      	ldrb	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	3350      	adds	r3, #80	; 0x50
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 f939 	bl	8005834 <USB_GetCurrentFrame>
 80025c2:	4603      	mov	r3, r0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 f914 	bl	8005806 <USB_GetHostSpeed>
 80025de:	4603      	mov	r3, r0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d119      	bne.n	800264c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	461a      	mov	r2, r3
 8002626:	2304      	movs	r3, #4
 8002628:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	0151      	lsls	r1, r2, #5
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	440a      	add	r2, r1
 8002640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	60d3      	str	r3, [r2, #12]
 800264a:	e101      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002662:	d12b      	bne.n	80026bc <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	461a      	mov	r2, r3
 8002672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002676:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3361      	adds	r3, #97	; 0x61
 8002686:	2207      	movs	r2, #7
 8002688:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	0151      	lsls	r1, r2, #5
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	440a      	add	r2, r1
 80026a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f003 fb30 	bl	8005d1a <USB_HC_Halt>
 80026ba:	e0c9      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d109      	bne.n	80026e6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	461a      	mov	r2, r3
 80026e0:	2320      	movs	r3, #32
 80026e2:	6093      	str	r3, [r2, #8]
 80026e4:	e0b4      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d133      	bne.n	8002764 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	0151      	lsls	r1, r2, #5
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	440a      	add	r2, r1
 8002712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002716:	f043 0302 	orr.w	r3, r3, #2
 800271a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	3361      	adds	r3, #97	; 0x61
 800272a:	2205      	movs	r2, #5
 800272c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	461a      	mov	r2, r3
 800273c:	2310      	movs	r3, #16
 800273e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	461a      	mov	r2, r3
 800274e:	2308      	movs	r3, #8
 8002750:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f003 fadc 	bl	8005d1a <USB_HC_Halt>
 8002762:	e075      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277a:	d134      	bne.n	80027e6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	0151      	lsls	r1, r2, #5
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	440a      	add	r2, r1
 8002792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002796:	f043 0302 	orr.w	r3, r3, #2
 800279a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3361      	adds	r3, #97	; 0x61
 80027aa:	2208      	movs	r2, #8
 80027ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ba:	461a      	mov	r2, r3
 80027bc:	2310      	movs	r3, #16
 80027be:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	461a      	mov	r2, r3
 80027ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027d2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 fa9b 	bl	8005d1a <USB_HC_Halt>
 80027e4:	e034      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f8:	2b80      	cmp	r3, #128	; 0x80
 80027fa:	d129      	bne.n	8002850 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	0151      	lsls	r1, r2, #5
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	440a      	add	r2, r1
 8002812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	3361      	adds	r3, #97	; 0x61
 800282a:	2206      	movs	r2, #6
 800282c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f003 fa6e 	bl	8005d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	461a      	mov	r2, r3
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002866:	d122      	bne.n	80028ae <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	0151      	lsls	r1, r2, #5
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	440a      	add	r2, r1
 800287e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f003 fa41 	bl	8005d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	461a      	mov	r2, r3
 80028a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028aa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80028ac:	e2ba      	b.n	8002e24 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	f040 811b 	bne.w	8002afc <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d019      	beq.n	8002902 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	3348      	adds	r3, #72	; 0x48
 80028dc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	0159      	lsls	r1, r3, #5
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	440b      	add	r3, r1
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	202c      	movs	r0, #44	; 0x2c
 80028f8:	fb00 f303 	mul.w	r3, r0, r3
 80028fc:	440b      	add	r3, r1
 80028fe:	3350      	adds	r3, #80	; 0x50
 8002900:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	3361      	adds	r3, #97	; 0x61
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	335c      	adds	r3, #92	; 0x5c
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002932:	461a      	mov	r2, r3
 8002934:	2301      	movs	r3, #1
 8002936:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	333f      	adds	r3, #63	; 0x3f
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	333f      	adds	r3, #63	; 0x3f
 800295a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800295c:	2b02      	cmp	r3, #2
 800295e:	d121      	bne.n	80029a4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	0151      	lsls	r1, r2, #5
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	440a      	add	r2, r1
 8002976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800297a:	f043 0302 	orr.w	r3, r3, #2
 800297e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f003 f9c5 	bl	8005d1a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	461a      	mov	r2, r3
 800299e:	2310      	movs	r3, #16
 80029a0:	6093      	str	r3, [r2, #8]
 80029a2:	e066      	b.n	8002a72 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	333f      	adds	r3, #63	; 0x3f
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d127      	bne.n	8002a08 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	0151      	lsls	r1, r2, #5
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	440a      	add	r2, r1
 80029ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029d6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3360      	adds	r3, #96	; 0x60
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	b2d9      	uxtb	r1, r3
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	202c      	movs	r0, #44	; 0x2c
 80029f4:	fb00 f303 	mul.w	r3, r0, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	3360      	adds	r3, #96	; 0x60
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f005 fb47 	bl	8008094 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a06:	e034      	b.n	8002a72 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	333f      	adds	r3, #63	; 0x3f
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d12a      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3360      	adds	r3, #96	; 0x60
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3354      	adds	r3, #84	; 0x54
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	f083 0301 	eor.w	r3, r3, #1
 8002a42:	b2d8      	uxtb	r0, r3
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3354      	adds	r3, #84	; 0x54
 8002a52:	4602      	mov	r2, r0
 8002a54:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	b2d9      	uxtb	r1, r3
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	202c      	movs	r0, #44	; 0x2c
 8002a60:	fb00 f303 	mul.w	r3, r0, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3360      	adds	r3, #96	; 0x60
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f005 fb11 	bl	8008094 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d12b      	bne.n	8002ad2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	3348      	adds	r3, #72	; 0x48
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	202c      	movs	r0, #44	; 0x2c
 8002a90:	fb00 f202 	mul.w	r2, r0, r2
 8002a94:	440a      	add	r2, r1
 8002a96:	3240      	adds	r2, #64	; 0x40
 8002a98:	8812      	ldrh	r2, [r2, #0]
 8002a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 81be 	beq.w	8002e24 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3354      	adds	r3, #84	; 0x54
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f083 0301 	eor.w	r3, r3, #1
 8002abc:	b2d8      	uxtb	r0, r3
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3354      	adds	r3, #84	; 0x54
 8002acc:	4602      	mov	r2, r0
 8002ace:	701a      	strb	r2, [r3, #0]
}
 8002ad0:	e1a8      	b.n	8002e24 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3354      	adds	r3, #84	; 0x54
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	f083 0301 	eor.w	r3, r3, #1
 8002ae6:	b2d8      	uxtb	r0, r3
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	3354      	adds	r3, #84	; 0x54
 8002af6:	4602      	mov	r2, r0
 8002af8:	701a      	strb	r2, [r3, #0]
}
 8002afa:	e193      	b.n	8002e24 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	f040 8106 	bne.w	8002d20 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	0151      	lsls	r1, r2, #5
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	440a      	add	r2, r1
 8002b2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b2e:	f023 0302 	bic.w	r3, r3, #2
 8002b32:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3361      	adds	r3, #97	; 0x61
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d109      	bne.n	8002b5c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3360      	adds	r3, #96	; 0x60
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	e0c9      	b.n	8002cf0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3361      	adds	r3, #97	; 0x61
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d109      	bne.n	8002b84 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3360      	adds	r3, #96	; 0x60
 8002b7e:	2205      	movs	r2, #5
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e0b5      	b.n	8002cf0 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3361      	adds	r3, #97	; 0x61
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b06      	cmp	r3, #6
 8002b96:	d009      	beq.n	8002bac <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3361      	adds	r3, #97	; 0x61
 8002ba6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d150      	bne.n	8002c4e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	335c      	adds	r3, #92	; 0x5c
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	202c      	movs	r0, #44	; 0x2c
 8002bc4:	fb00 f303 	mul.w	r3, r0, r3
 8002bc8:	440b      	add	r3, r1
 8002bca:	335c      	adds	r3, #92	; 0x5c
 8002bcc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	335c      	adds	r3, #92	; 0x5c
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d912      	bls.n	8002c08 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	335c      	adds	r3, #92	; 0x5c
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	3360      	adds	r3, #96	; 0x60
 8002c02:	2204      	movs	r2, #4
 8002c04:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c06:	e073      	b.n	8002cf0 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3360      	adds	r3, #96	; 0x60
 8002c16:	2202      	movs	r2, #2
 8002c18:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c30:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c38:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c46:	461a      	mov	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c4c:	e050      	b.n	8002cf0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3361      	adds	r3, #97	; 0x61
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d122      	bne.n	8002ca8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3360      	adds	r3, #96	; 0x60
 8002c70:	2202      	movs	r2, #2
 8002c72:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c8a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c92:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e023      	b.n	8002cf0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3361      	adds	r3, #97	; 0x61
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b07      	cmp	r3, #7
 8002cba:	d119      	bne.n	8002cf0 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	335c      	adds	r3, #92	; 0x5c
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	202c      	movs	r0, #44	; 0x2c
 8002cd4:	fb00 f303 	mul.w	r3, r0, r3
 8002cd8:	440b      	add	r3, r1
 8002cda:	335c      	adds	r3, #92	; 0x5c
 8002cdc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	3360      	adds	r3, #96	; 0x60
 8002cec:	2204      	movs	r2, #4
 8002cee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2302      	movs	r3, #2
 8002d00:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	b2d9      	uxtb	r1, r3
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	202c      	movs	r0, #44	; 0x2c
 8002d0c:	fb00 f303 	mul.w	r3, r0, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3360      	adds	r3, #96	; 0x60
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f005 f9bb 	bl	8008094 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d1e:	e081      	b.n	8002e24 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d176      	bne.n	8002e24 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	333f      	adds	r3, #63	; 0x3f
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d121      	bne.n	8002d8e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	335c      	adds	r3, #92	; 0x5c
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	0151      	lsls	r1, r2, #5
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	440a      	add	r2, r1
 8002d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d76:	f043 0302 	orr.w	r3, r3, #2
 8002d7a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 ffc7 	bl	8005d1a <USB_HC_Halt>
 8002d8c:	e041      	b.n	8002e12 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	333f      	adds	r3, #63	; 0x3f
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	333f      	adds	r3, #63	; 0x3f
 8002db0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d12d      	bne.n	8002e12 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	335c      	adds	r3, #92	; 0x5c
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d120      	bne.n	8002e12 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	3361      	adds	r3, #97	; 0x61
 8002dde:	2203      	movs	r2, #3
 8002de0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	0151      	lsls	r1, r2, #5
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	440a      	add	r2, r1
 8002df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dfc:	f043 0302 	orr.w	r3, r3, #2
 8002e00:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f002 ff84 	bl	8005d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2310      	movs	r3, #16
 8002e22:	6093      	str	r3, [r2, #8]
}
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d119      	bne.n	8002e90 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	0151      	lsls	r1, r2, #5
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	440a      	add	r2, r1
 8002e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e88:	f043 0302 	orr.w	r3, r3, #2
 8002e8c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002e8e:	e3c6      	b.n	800361e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d13e      	bne.n	8002f24 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	333d      	adds	r3, #61	; 0x3d
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	f040 83a8 	bne.w	800361e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	333d      	adds	r3, #61	; 0x3d
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	3360      	adds	r3, #96	; 0x60
 8002eee:	2202      	movs	r2, #2
 8002ef0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	0151      	lsls	r1, r2, #5
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	440a      	add	r2, r1
 8002f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f002 fefc 	bl	8005d1a <USB_HC_Halt>
}
 8002f22:	e37c      	b.n	800361e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f3a:	d122      	bne.n	8002f82 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	0151      	lsls	r1, r2, #5
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	440a      	add	r2, r1
 8002f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f56:	f043 0302 	orr.w	r3, r3, #2
 8002f5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f002 fed7 	bl	8005d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f7e:	6093      	str	r3, [r2, #8]
}
 8002f80:	e34d      	b.n	800361e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d150      	bne.n	800303a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	212c      	movs	r1, #44	; 0x2c
 8002f9e:	fb01 f303 	mul.w	r3, r1, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	335c      	adds	r3, #92	; 0x5c
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d111      	bne.n	8002fe4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	212c      	movs	r1, #44	; 0x2c
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	333d      	adds	r3, #61	; 0x3d
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2340      	movs	r3, #64	; 0x40
 8002fe2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	0151      	lsls	r1, r2, #5
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	440a      	add	r2, r1
 8002ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ffe:	f043 0302 	orr.w	r3, r3, #2
 8003002:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f002 fe83 	bl	8005d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	461a      	mov	r2, r3
 8003022:	2301      	movs	r3, #1
 8003024:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	3361      	adds	r3, #97	; 0x61
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
}
 8003038:	e2f1      	b.n	800361e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	4413      	add	r3, r2
 8003042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d13c      	bne.n	80030ca <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	212c      	movs	r1, #44	; 0x2c
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	4413      	add	r3, r2
 800305c:	3361      	adds	r3, #97	; 0x61
 800305e:	2204      	movs	r2, #4
 8003060:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	212c      	movs	r1, #44	; 0x2c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	333d      	adds	r3, #61	; 0x3d
 8003070:	2201      	movs	r2, #1
 8003072:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	335c      	adds	r3, #92	; 0x5c
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	0151      	lsls	r1, r2, #5
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	440a      	add	r2, r1
 800309c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 fe32 	bl	8005d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	461a      	mov	r2, r3
 80030c4:	2340      	movs	r3, #64	; 0x40
 80030c6:	6093      	str	r3, [r2, #8]
}
 80030c8:	e2a9      	b.n	800361e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d12a      	bne.n	8003136 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	461a      	mov	r2, r3
 80030ee:	2308      	movs	r3, #8
 80030f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	0151      	lsls	r1, r2, #5
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	440a      	add	r2, r1
 8003108:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f002 fdfc 	bl	8005d1a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	212c      	movs	r1, #44	; 0x2c
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	3361      	adds	r3, #97	; 0x61
 8003130:	2205      	movs	r2, #5
 8003132:	701a      	strb	r2, [r3, #0]
}
 8003134:	e273      	b.n	800361e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b10      	cmp	r3, #16
 800314a:	d150      	bne.n	80031ee <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	335c      	adds	r3, #92	; 0x5c
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	3361      	adds	r3, #97	; 0x61
 800316c:	2203      	movs	r2, #3
 800316e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	333d      	adds	r3, #61	; 0x3d
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d112      	bne.n	80031aa <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	212c      	movs	r1, #44	; 0x2c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	333c      	adds	r3, #60	; 0x3c
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d108      	bne.n	80031aa <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	333d      	adds	r3, #61	; 0x3d
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	0151      	lsls	r1, r2, #5
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	440a      	add	r2, r1
 80031c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031c4:	f043 0302 	orr.w	r3, r3, #2
 80031c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f002 fda0 	bl	8005d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e6:	461a      	mov	r2, r3
 80031e8:	2310      	movs	r3, #16
 80031ea:	6093      	str	r3, [r2, #8]
}
 80031ec:	e217      	b.n	800361e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003200:	2b80      	cmp	r3, #128	; 0x80
 8003202:	d174      	bne.n	80032ee <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d121      	bne.n	8003250 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3361      	adds	r3, #97	; 0x61
 800321a:	2206      	movs	r2, #6
 800321c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	4413      	add	r3, r2
 8003226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	0151      	lsls	r1, r2, #5
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	440a      	add	r2, r1
 8003234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f002 fd66 	bl	8005d1a <USB_HC_Halt>
 800324e:	e044      	b.n	80032da <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	212c      	movs	r1, #44	; 0x2c
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	4413      	add	r3, r2
 800325c:	335c      	adds	r3, #92	; 0x5c
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	202c      	movs	r0, #44	; 0x2c
 8003268:	fb00 f303 	mul.w	r3, r0, r3
 800326c:	440b      	add	r3, r1
 800326e:	335c      	adds	r3, #92	; 0x5c
 8003270:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	335c      	adds	r3, #92	; 0x5c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d920      	bls.n	80032c8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	335c      	adds	r3, #92	; 0x5c
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3360      	adds	r3, #96	; 0x60
 80032a6:	2204      	movs	r2, #4
 80032a8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	b2d9      	uxtb	r1, r3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	202c      	movs	r0, #44	; 0x2c
 80032b4:	fb00 f303 	mul.w	r3, r0, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3360      	adds	r3, #96	; 0x60
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f004 fee7 	bl	8008094 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032c6:	e008      	b.n	80032da <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	212c      	movs	r1, #44	; 0x2c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	3360      	adds	r3, #96	; 0x60
 80032d6:	2202      	movs	r2, #2
 80032d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e6:	461a      	mov	r2, r3
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	6093      	str	r3, [r2, #8]
}
 80032ec:	e197      	b.n	800361e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003304:	d134      	bne.n	8003370 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	0151      	lsls	r1, r2, #5
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	440a      	add	r2, r1
 800331c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f002 fcf2 	bl	8005d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	4413      	add	r3, r2
 800333e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003342:	461a      	mov	r2, r3
 8003344:	2310      	movs	r3, #16
 8003346:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	4413      	add	r3, r2
 8003350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003354:	461a      	mov	r2, r3
 8003356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800335a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	3361      	adds	r3, #97	; 0x61
 800336a:	2208      	movs	r2, #8
 800336c:	701a      	strb	r2, [r3, #0]
}
 800336e:	e156      	b.n	800361e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b02      	cmp	r3, #2
 8003384:	f040 814b 	bne.w	800361e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	0151      	lsls	r1, r2, #5
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	440a      	add	r2, r1
 800339e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a2:	f023 0302 	bic.w	r3, r3, #2
 80033a6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	212c      	movs	r1, #44	; 0x2c
 80033ae:	fb01 f303 	mul.w	r3, r1, r3
 80033b2:	4413      	add	r3, r2
 80033b4:	3361      	adds	r3, #97	; 0x61
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d179      	bne.n	80034b0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	212c      	movs	r1, #44	; 0x2c
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	3360      	adds	r3, #96	; 0x60
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	212c      	movs	r1, #44	; 0x2c
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	333f      	adds	r3, #63	; 0x3f
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d00a      	beq.n	80033f8 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	212c      	movs	r1, #44	; 0x2c
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	333f      	adds	r3, #63	; 0x3f
 80033f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	f040 80fc 	bne.w	80035f0 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d142      	bne.n	8003486 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	334c      	adds	r3, #76	; 0x4c
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80ed 	beq.w	80035f0 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	212c      	movs	r1, #44	; 0x2c
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	4413      	add	r3, r2
 8003422:	334c      	adds	r3, #76	; 0x4c
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	202c      	movs	r0, #44	; 0x2c
 800342c:	fb00 f202 	mul.w	r2, r0, r2
 8003430:	440a      	add	r2, r1
 8003432:	3240      	adds	r2, #64	; 0x40
 8003434:	8812      	ldrh	r2, [r2, #0]
 8003436:	4413      	add	r3, r2
 8003438:	3b01      	subs	r3, #1
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	202c      	movs	r0, #44	; 0x2c
 8003440:	fb00 f202 	mul.w	r2, r0, r2
 8003444:	440a      	add	r2, r1
 8003446:	3240      	adds	r2, #64	; 0x40
 8003448:	8812      	ldrh	r2, [r2, #0]
 800344a:	fbb3 f3f2 	udiv	r3, r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80ca 	beq.w	80035f0 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	3355      	adds	r3, #85	; 0x55
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f083 0301 	eor.w	r3, r3, #1
 8003470:	b2d8      	uxtb	r0, r3
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	212c      	movs	r1, #44	; 0x2c
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	4413      	add	r3, r2
 800347e:	3355      	adds	r3, #85	; 0x55
 8003480:	4602      	mov	r2, r0
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	e0b4      	b.n	80035f0 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	212c      	movs	r1, #44	; 0x2c
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	4413      	add	r3, r2
 8003492:	3355      	adds	r3, #85	; 0x55
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	f083 0301 	eor.w	r3, r3, #1
 800349a:	b2d8      	uxtb	r0, r3
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	212c      	movs	r1, #44	; 0x2c
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	3355      	adds	r3, #85	; 0x55
 80034aa:	4602      	mov	r2, r0
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e09f      	b.n	80035f0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	212c      	movs	r1, #44	; 0x2c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	3361      	adds	r3, #97	; 0x61
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d109      	bne.n	80034d8 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	212c      	movs	r1, #44	; 0x2c
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	3360      	adds	r3, #96	; 0x60
 80034d2:	2202      	movs	r2, #2
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	e08b      	b.n	80035f0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	212c      	movs	r1, #44	; 0x2c
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	3361      	adds	r3, #97	; 0x61
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d109      	bne.n	8003500 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	212c      	movs	r1, #44	; 0x2c
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	3360      	adds	r3, #96	; 0x60
 80034fa:	2202      	movs	r2, #2
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e077      	b.n	80035f0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	3361      	adds	r3, #97	; 0x61
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b05      	cmp	r3, #5
 8003512:	d109      	bne.n	8003528 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	3360      	adds	r3, #96	; 0x60
 8003522:	2205      	movs	r2, #5
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	e063      	b.n	80035f0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	3361      	adds	r3, #97	; 0x61
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b06      	cmp	r3, #6
 800353a:	d009      	beq.n	8003550 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	212c      	movs	r1, #44	; 0x2c
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	4413      	add	r3, r2
 8003548:	3361      	adds	r3, #97	; 0x61
 800354a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800354c:	2b08      	cmp	r3, #8
 800354e:	d14f      	bne.n	80035f0 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	212c      	movs	r1, #44	; 0x2c
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	4413      	add	r3, r2
 800355c:	335c      	adds	r3, #92	; 0x5c
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	202c      	movs	r0, #44	; 0x2c
 8003568:	fb00 f303 	mul.w	r3, r0, r3
 800356c:	440b      	add	r3, r1
 800356e:	335c      	adds	r3, #92	; 0x5c
 8003570:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	212c      	movs	r1, #44	; 0x2c
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	4413      	add	r3, r2
 800357e:	335c      	adds	r3, #92	; 0x5c
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d912      	bls.n	80035ac <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	212c      	movs	r1, #44	; 0x2c
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	4413      	add	r3, r2
 8003592:	335c      	adds	r3, #92	; 0x5c
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3360      	adds	r3, #96	; 0x60
 80035a6:	2204      	movs	r2, #4
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	e021      	b.n	80035f0 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3360      	adds	r3, #96	; 0x60
 80035ba:	2202      	movs	r2, #2
 80035bc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035d4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035dc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ea:	461a      	mov	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fc:	461a      	mov	r2, r3
 80035fe:	2302      	movs	r3, #2
 8003600:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	b2d9      	uxtb	r1, r3
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	202c      	movs	r0, #44	; 0x2c
 800360c:	fb00 f303 	mul.w	r3, r0, r3
 8003610:	4413      	add	r3, r2
 8003612:	3360      	adds	r3, #96	; 0x60
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f004 fd3b 	bl	8008094 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800361e:	bf00      	nop
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b08a      	sub	sp, #40	; 0x28
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	0c5b      	lsrs	r3, r3, #17
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800365a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d004      	beq.n	800366c <HCD_RXQLVL_IRQHandler+0x46>
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b05      	cmp	r3, #5
 8003666:	f000 80a9 	beq.w	80037bc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800366a:	e0aa      	b.n	80037c2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80a6 	beq.w	80037c0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	3344      	adds	r3, #68	; 0x44
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 809b 	beq.w	80037c0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	212c      	movs	r1, #44	; 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	3350      	adds	r3, #80	; 0x50
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	441a      	add	r2, r3
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	202c      	movs	r0, #44	; 0x2c
 80036a4:	fb00 f303 	mul.w	r3, r0, r3
 80036a8:	440b      	add	r3, r1
 80036aa:	334c      	adds	r3, #76	; 0x4c
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d87a      	bhi.n	80037a8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	212c      	movs	r1, #44	; 0x2c
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	3344      	adds	r3, #68	; 0x44
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	b292      	uxth	r2, r2
 80036ca:	4619      	mov	r1, r3
 80036cc:	f001 fec3 	bl	8005456 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	3344      	adds	r3, #68	; 0x44
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	441a      	add	r2, r3
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	202c      	movs	r0, #44	; 0x2c
 80036ea:	fb00 f303 	mul.w	r3, r0, r3
 80036ee:	440b      	add	r3, r1
 80036f0:	3344      	adds	r3, #68	; 0x44
 80036f2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	212c      	movs	r1, #44	; 0x2c
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	3350      	adds	r3, #80	; 0x50
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	441a      	add	r2, r3
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	202c      	movs	r0, #44	; 0x2c
 800370e:	fb00 f303 	mul.w	r3, r0, r3
 8003712:	440b      	add	r3, r1
 8003714:	3350      	adds	r3, #80	; 0x50
 8003716:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	0cdb      	lsrs	r3, r3, #19
 8003728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800372c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	212c      	movs	r1, #44	; 0x2c
 8003734:	fb01 f303 	mul.w	r3, r1, r3
 8003738:	4413      	add	r3, r2
 800373a:	3340      	adds	r3, #64	; 0x40
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4293      	cmp	r3, r2
 8003744:	d13c      	bne.n	80037c0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d039      	beq.n	80037c0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003762:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800376a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	4413      	add	r3, r2
 8003774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003778:	461a      	mov	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	212c      	movs	r1, #44	; 0x2c
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	3354      	adds	r3, #84	; 0x54
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	f083 0301 	eor.w	r3, r3, #1
 8003792:	b2d8      	uxtb	r0, r3
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	212c      	movs	r1, #44	; 0x2c
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	4413      	add	r3, r2
 80037a0:	3354      	adds	r3, #84	; 0x54
 80037a2:	4602      	mov	r2, r0
 80037a4:	701a      	strb	r2, [r3, #0]
      break;
 80037a6:	e00b      	b.n	80037c0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	212c      	movs	r1, #44	; 0x2c
 80037ae:	fb01 f303 	mul.w	r3, r1, r3
 80037b2:	4413      	add	r3, r2
 80037b4:	3360      	adds	r3, #96	; 0x60
 80037b6:	2204      	movs	r2, #4
 80037b8:	701a      	strb	r2, [r3, #0]
      break;
 80037ba:	e001      	b.n	80037c0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80037bc:	bf00      	nop
 80037be:	e000      	b.n	80037c2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80037c0:	bf00      	nop
  }
}
 80037c2:	bf00      	nop
 80037c4:	3728      	adds	r7, #40	; 0x28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037f6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d10b      	bne.n	800381a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d102      	bne.n	8003812 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f004 fc25 	bl	800805c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f043 0302 	orr.w	r3, r3, #2
 8003818:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b08      	cmp	r3, #8
 8003822:	d132      	bne.n	800388a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f043 0308 	orr.w	r3, r3, #8
 800382a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b04      	cmp	r3, #4
 8003834:	d126      	bne.n	8003884 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d113      	bne.n	8003866 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003844:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003848:	d106      	bne.n	8003858 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2102      	movs	r1, #2
 8003850:	4618      	mov	r0, r3
 8003852:	f001 ff3b 	bl	80056cc <USB_InitFSLSPClkSel>
 8003856:	e011      	b.n	800387c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2101      	movs	r1, #1
 800385e:	4618      	mov	r0, r3
 8003860:	f001 ff34 	bl	80056cc <USB_InitFSLSPClkSel>
 8003864:	e00a      	b.n	800387c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d106      	bne.n	800387c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003874:	461a      	mov	r2, r3
 8003876:	f64e 2360 	movw	r3, #60000	; 0xea60
 800387a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f004 fc17 	bl	80080b0 <HAL_HCD_PortEnabled_Callback>
 8003882:	e002      	b.n	800388a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f004 fc21 	bl	80080cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b20      	cmp	r3, #32
 8003892:	d103      	bne.n	800389c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f043 0320 	orr.w	r3, r3, #32
 800389a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038a2:	461a      	mov	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	6013      	str	r3, [r2, #0]
}
 80038a8:	bf00      	nop
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e12b      	b.n	8003b1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd fdf2 	bl	80014c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2224      	movs	r2, #36	; 0x24
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003914:	f001 fbd8 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8003918:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4a81      	ldr	r2, [pc, #516]	; (8003b24 <HAL_I2C_Init+0x274>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d807      	bhi.n	8003934 <HAL_I2C_Init+0x84>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4a80      	ldr	r2, [pc, #512]	; (8003b28 <HAL_I2C_Init+0x278>)
 8003928:	4293      	cmp	r3, r2
 800392a:	bf94      	ite	ls
 800392c:	2301      	movls	r3, #1
 800392e:	2300      	movhi	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	e006      	b.n	8003942 <HAL_I2C_Init+0x92>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4a7d      	ldr	r2, [pc, #500]	; (8003b2c <HAL_I2C_Init+0x27c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	bf94      	ite	ls
 800393c:	2301      	movls	r3, #1
 800393e:	2300      	movhi	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e0e7      	b.n	8003b1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a78      	ldr	r2, [pc, #480]	; (8003b30 <HAL_I2C_Init+0x280>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	0c9b      	lsrs	r3, r3, #18
 8003954:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4a6a      	ldr	r2, [pc, #424]	; (8003b24 <HAL_I2C_Init+0x274>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d802      	bhi.n	8003984 <HAL_I2C_Init+0xd4>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3301      	adds	r3, #1
 8003982:	e009      	b.n	8003998 <HAL_I2C_Init+0xe8>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	4a69      	ldr	r2, [pc, #420]	; (8003b34 <HAL_I2C_Init+0x284>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	099b      	lsrs	r3, r3, #6
 8003996:	3301      	adds	r3, #1
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	430b      	orrs	r3, r1
 800399e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	495c      	ldr	r1, [pc, #368]	; (8003b24 <HAL_I2C_Init+0x274>)
 80039b4:	428b      	cmp	r3, r1
 80039b6:	d819      	bhi.n	80039ec <HAL_I2C_Init+0x13c>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1e59      	subs	r1, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039c6:	1c59      	adds	r1, r3, #1
 80039c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039cc:	400b      	ands	r3, r1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_I2C_Init+0x138>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1e59      	subs	r1, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e0:	3301      	adds	r3, #1
 80039e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e6:	e051      	b.n	8003a8c <HAL_I2C_Init+0x1dc>
 80039e8:	2304      	movs	r3, #4
 80039ea:	e04f      	b.n	8003a8c <HAL_I2C_Init+0x1dc>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d111      	bne.n	8003a18 <HAL_I2C_Init+0x168>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	1e58      	subs	r0, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	440b      	add	r3, r1
 8003a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a06:	3301      	adds	r3, #1
 8003a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	e012      	b.n	8003a3e <HAL_I2C_Init+0x18e>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	1e58      	subs	r0, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	0099      	lsls	r1, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_I2C_Init+0x196>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e022      	b.n	8003a8c <HAL_I2C_Init+0x1dc>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10e      	bne.n	8003a6c <HAL_I2C_Init+0x1bc>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1e58      	subs	r0, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6859      	ldr	r1, [r3, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	440b      	add	r3, r1
 8003a5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a60:	3301      	adds	r3, #1
 8003a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6a:	e00f      	b.n	8003a8c <HAL_I2C_Init+0x1dc>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1e58      	subs	r0, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	0099      	lsls	r1, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a82:	3301      	adds	r3, #1
 8003a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	6809      	ldr	r1, [r1, #0]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003aba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6911      	ldr	r1, [r2, #16]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68d2      	ldr	r2, [r2, #12]
 8003ac6:	4311      	orrs	r1, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	000186a0 	.word	0x000186a0
 8003b28:	001e847f 	.word	0x001e847f
 8003b2c:	003d08ff 	.word	0x003d08ff
 8003b30:	431bde83 	.word	0x431bde83
 8003b34:	10624dd3 	.word	0x10624dd3

08003b38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	4608      	mov	r0, r1
 8003b42:	4611      	mov	r1, r2
 8003b44:	461a      	mov	r2, r3
 8003b46:	4603      	mov	r3, r0
 8003b48:	817b      	strh	r3, [r7, #10]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	813b      	strh	r3, [r7, #8]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b52:	f7fd fe51 	bl	80017f8 <HAL_GetTick>
 8003b56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	f040 80d9 	bne.w	8003d18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	2319      	movs	r3, #25
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	496d      	ldr	r1, [pc, #436]	; (8003d24 <HAL_I2C_Mem_Write+0x1ec>)
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fc7f 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e0cc      	b.n	8003d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_I2C_Mem_Write+0x56>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e0c5      	b.n	8003d1a <HAL_I2C_Mem_Write+0x1e2>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d007      	beq.n	8003bb4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2221      	movs	r2, #33	; 0x21
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2240      	movs	r2, #64	; 0x40
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a3a      	ldr	r2, [r7, #32]
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a4d      	ldr	r2, [pc, #308]	; (8003d28 <HAL_I2C_Mem_Write+0x1f0>)
 8003bf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bf6:	88f8      	ldrh	r0, [r7, #6]
 8003bf8:	893a      	ldrh	r2, [r7, #8]
 8003bfa:	8979      	ldrh	r1, [r7, #10]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	4603      	mov	r3, r0
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fab6 	bl	8004178 <I2C_RequestMemoryWrite>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d052      	beq.n	8003cb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e081      	b.n	8003d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fd00 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00d      	beq.n	8003c42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d107      	bne.n	8003c3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e06b      	b.n	8003d1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	781a      	ldrb	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d11b      	bne.n	8003cb8 <HAL_I2C_Mem_Write+0x180>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d017      	beq.n	8003cb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	781a      	ldrb	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1aa      	bne.n	8003c16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fcec 	bl	80046a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00d      	beq.n	8003cec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d107      	bne.n	8003ce8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e016      	b.n	8003d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e000      	b.n	8003d1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
  }
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	00100002 	.word	0x00100002
 8003d28:	ffff0000 	.word	0xffff0000

08003d2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08c      	sub	sp, #48	; 0x30
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	4608      	mov	r0, r1
 8003d36:	4611      	mov	r1, r2
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	817b      	strh	r3, [r7, #10]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	813b      	strh	r3, [r7, #8]
 8003d42:	4613      	mov	r3, r2
 8003d44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d46:	f7fd fd57 	bl	80017f8 <HAL_GetTick>
 8003d4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b20      	cmp	r3, #32
 8003d56:	f040 8208 	bne.w	800416a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	2319      	movs	r3, #25
 8003d60:	2201      	movs	r2, #1
 8003d62:	497b      	ldr	r1, [pc, #492]	; (8003f50 <HAL_I2C_Mem_Read+0x224>)
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 fb85 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d70:	2302      	movs	r3, #2
 8003d72:	e1fb      	b.n	800416c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_I2C_Mem_Read+0x56>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e1f4      	b.n	800416c <HAL_I2C_Mem_Read+0x440>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d007      	beq.n	8003da8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2222      	movs	r2, #34	; 0x22
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2240      	movs	r2, #64	; 0x40
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a5b      	ldr	r2, [pc, #364]	; (8003f54 <HAL_I2C_Mem_Read+0x228>)
 8003de8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dea:	88f8      	ldrh	r0, [r7, #6]
 8003dec:	893a      	ldrh	r2, [r7, #8]
 8003dee:	8979      	ldrh	r1, [r7, #10]
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	4603      	mov	r3, r0
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fa52 	bl	80042a4 <I2C_RequestMemoryRead>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e1b0      	b.n	800416c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d113      	bne.n	8003e3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e12:	2300      	movs	r3, #0
 8003e14:	623b      	str	r3, [r7, #32]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	623b      	str	r3, [r7, #32]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	623b      	str	r3, [r7, #32]
 8003e26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	e184      	b.n	8004144 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d11b      	bne.n	8003e7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	e164      	b.n	8004144 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d11b      	bne.n	8003eba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	e144      	b.n	8004144 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ed0:	e138      	b.n	8004144 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	f200 80f1 	bhi.w	80040be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d123      	bne.n	8003f2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fc1b 	bl	8004724 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e139      	b.n	800416c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f2a:	e10b      	b.n	8004144 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d14e      	bne.n	8003fd2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	4906      	ldr	r1, [pc, #24]	; (8003f58 <HAL_I2C_Mem_Read+0x22c>)
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 fa98 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e10e      	b.n	800416c <HAL_I2C_Mem_Read+0x440>
 8003f4e:	bf00      	nop
 8003f50:	00100002 	.word	0x00100002
 8003f54:	ffff0000 	.word	0xffff0000
 8003f58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fd0:	e0b8      	b.n	8004144 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4966      	ldr	r1, [pc, #408]	; (8004174 <HAL_I2C_Mem_Read+0x448>)
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fa49 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0bf      	b.n	800416c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	2200      	movs	r2, #0
 8004036:	494f      	ldr	r1, [pc, #316]	; (8004174 <HAL_I2C_Mem_Read+0x448>)
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 fa1b 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e091      	b.n	800416c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040bc:	e042      	b.n	8004144 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fb2e 	bl	8004724 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e04c      	b.n	800416c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b04      	cmp	r3, #4
 8004110:	d118      	bne.n	8004144 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	f47f aec2 	bne.w	8003ed2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	e000      	b.n	800416c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800416a:	2302      	movs	r3, #2
  }
}
 800416c:	4618      	mov	r0, r3
 800416e:	3728      	adds	r7, #40	; 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	00010004 	.word	0x00010004

08004178 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	4608      	mov	r0, r1
 8004182:	4611      	mov	r1, r2
 8004184:	461a      	mov	r2, r3
 8004186:	4603      	mov	r3, r0
 8004188:	817b      	strh	r3, [r7, #10]
 800418a:	460b      	mov	r3, r1
 800418c:	813b      	strh	r3, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f960 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00d      	beq.n	80041d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c8:	d103      	bne.n	80041d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e05f      	b.n	8004296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041d6:	897b      	ldrh	r3, [r7, #10]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	6a3a      	ldr	r2, [r7, #32]
 80041ea:	492d      	ldr	r1, [pc, #180]	; (80042a0 <I2C_RequestMemoryWrite+0x128>)
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f998 	bl	8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e04c      	b.n	8004296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004214:	6a39      	ldr	r1, [r7, #32]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 fa02 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	2b04      	cmp	r3, #4
 8004228:	d107      	bne.n	800423a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004238:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e02b      	b.n	8004296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004244:	893b      	ldrh	r3, [r7, #8]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	611a      	str	r2, [r3, #16]
 800424e:	e021      	b.n	8004294 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004250:	893b      	ldrh	r3, [r7, #8]
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	b29b      	uxth	r3, r3
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800425e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004260:	6a39      	ldr	r1, [r7, #32]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f9dc 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	2b04      	cmp	r3, #4
 8004274:	d107      	bne.n	8004286 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004284:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e005      	b.n	8004296 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800428a:	893b      	ldrh	r3, [r7, #8]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	00010002 	.word	0x00010002

080042a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	817b      	strh	r3, [r7, #10]
 80042b6:	460b      	mov	r3, r1
 80042b8:	813b      	strh	r3, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f8c2 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00d      	beq.n	8004312 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004304:	d103      	bne.n	800430e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e0aa      	b.n	8004468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004312:	897b      	ldrh	r3, [r7, #10]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004320:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	6a3a      	ldr	r2, [r7, #32]
 8004326:	4952      	ldr	r1, [pc, #328]	; (8004470 <I2C_RequestMemoryRead+0x1cc>)
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f8fa 	bl	8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e097      	b.n	8004468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800434e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004350:	6a39      	ldr	r1, [r7, #32]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f964 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00d      	beq.n	800437a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	2b04      	cmp	r3, #4
 8004364:	d107      	bne.n	8004376 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004374:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e076      	b.n	8004468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d105      	bne.n	800438c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004380:	893b      	ldrh	r3, [r7, #8]
 8004382:	b2da      	uxtb	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	611a      	str	r2, [r3, #16]
 800438a:	e021      	b.n	80043d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800438c:	893b      	ldrh	r3, [r7, #8]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	b29b      	uxth	r3, r3
 8004392:	b2da      	uxtb	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800439a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439c:	6a39      	ldr	r1, [r7, #32]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f93e 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00d      	beq.n	80043c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d107      	bne.n	80043c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e050      	b.n	8004468 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043c6:	893b      	ldrh	r3, [r7, #8]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d2:	6a39      	ldr	r1, [r7, #32]
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f923 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00d      	beq.n	80043fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d107      	bne.n	80043f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e035      	b.n	8004468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800440a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	2200      	movs	r2, #0
 8004414:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f82b 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00d      	beq.n	8004440 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004432:	d103      	bne.n	800443c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e013      	b.n	8004468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004440:	897b      	ldrh	r3, [r7, #10]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	b2da      	uxtb	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	6a3a      	ldr	r2, [r7, #32]
 8004454:	4906      	ldr	r1, [pc, #24]	; (8004470 <I2C_RequestMemoryRead+0x1cc>)
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f863 	bl	8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	00010002 	.word	0x00010002

08004474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004484:	e025      	b.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d021      	beq.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448e:	f7fd f9b3 	bl	80017f8 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d302      	bcc.n	80044a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d116      	bne.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f043 0220 	orr.w	r2, r3, #32
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e023      	b.n	800451a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d10d      	bne.n	80044f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	43da      	mvns	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4013      	ands	r3, r2
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bf0c      	ite	eq
 80044ee:	2301      	moveq	r3, #1
 80044f0:	2300      	movne	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	e00c      	b.n	8004512 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	43da      	mvns	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4013      	ands	r3, r2
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	bf0c      	ite	eq
 800450a:	2301      	moveq	r3, #1
 800450c:	2300      	movne	r3, #0
 800450e:	b2db      	uxtb	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	429a      	cmp	r2, r3
 8004516:	d0b6      	beq.n	8004486 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004530:	e051      	b.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004540:	d123      	bne.n	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004550:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800455a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f043 0204 	orr.w	r2, r3, #4
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e046      	b.n	8004618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d021      	beq.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004592:	f7fd f931 	bl	80017f8 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d302      	bcc.n	80045a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d116      	bne.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f043 0220 	orr.w	r2, r3, #32
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e020      	b.n	8004618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10c      	bne.n	80045fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	43da      	mvns	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4013      	ands	r3, r2
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bf14      	ite	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	2300      	moveq	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	e00b      	b.n	8004612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	43da      	mvns	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4013      	ands	r3, r2
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d18d      	bne.n	8004532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800462c:	e02d      	b.n	800468a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f8ce 	bl	80047d0 <I2C_IsAcknowledgeFailed>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e02d      	b.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d021      	beq.n	800468a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7fd f8d7 	bl	80017f8 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d116      	bne.n	800468a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f043 0220 	orr.w	r2, r3, #32
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e007      	b.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d1ca      	bne.n	800462e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046ae:	e02d      	b.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f88d 	bl	80047d0 <I2C_IsAcknowledgeFailed>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e02d      	b.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d021      	beq.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c8:	f7fd f896 	bl	80017f8 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d302      	bcc.n	80046de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d116      	bne.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e007      	b.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b04      	cmp	r3, #4
 8004718:	d1ca      	bne.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004730:	e042      	b.n	80047b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b10      	cmp	r3, #16
 800473e:	d119      	bne.n	8004774 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0210 	mvn.w	r2, #16
 8004748:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e029      	b.n	80047c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004774:	f7fd f840 	bl	80017f8 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	429a      	cmp	r2, r3
 8004782:	d302      	bcc.n	800478a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d116      	bne.n	80047b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	f043 0220 	orr.w	r2, r3, #32
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e007      	b.n	80047c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b40      	cmp	r3, #64	; 0x40
 80047c4:	d1b5      	bne.n	8004732 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e6:	d11b      	bne.n	8004820 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	f043 0204 	orr.w	r2, r3, #4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e264      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d075      	beq.n	800493a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800484e:	4ba3      	ldr	r3, [pc, #652]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b04      	cmp	r3, #4
 8004858:	d00c      	beq.n	8004874 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800485a:	4ba0      	ldr	r3, [pc, #640]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004862:	2b08      	cmp	r3, #8
 8004864:	d112      	bne.n	800488c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004866:	4b9d      	ldr	r3, [pc, #628]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004872:	d10b      	bne.n	800488c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004874:	4b99      	ldr	r3, [pc, #612]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d05b      	beq.n	8004938 <HAL_RCC_OscConfig+0x108>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d157      	bne.n	8004938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e23f      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004894:	d106      	bne.n	80048a4 <HAL_RCC_OscConfig+0x74>
 8004896:	4b91      	ldr	r3, [pc, #580]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a90      	ldr	r2, [pc, #576]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e01d      	b.n	80048e0 <HAL_RCC_OscConfig+0xb0>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x98>
 80048ae:	4b8b      	ldr	r3, [pc, #556]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a8a      	ldr	r2, [pc, #552]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	4b88      	ldr	r3, [pc, #544]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a87      	ldr	r2, [pc, #540]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	e00b      	b.n	80048e0 <HAL_RCC_OscConfig+0xb0>
 80048c8:	4b84      	ldr	r3, [pc, #528]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a83      	ldr	r2, [pc, #524]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	4b81      	ldr	r3, [pc, #516]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a80      	ldr	r2, [pc, #512]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d013      	beq.n	8004910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fc ff86 	bl	80017f8 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f0:	f7fc ff82 	bl	80017f8 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	; 0x64
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e204      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004902:	4b76      	ldr	r3, [pc, #472]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0xc0>
 800490e:	e014      	b.n	800493a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fc ff72 	bl	80017f8 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004918:	f7fc ff6e 	bl	80017f8 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b64      	cmp	r3, #100	; 0x64
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e1f0      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800492a:	4b6c      	ldr	r3, [pc, #432]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0xe8>
 8004936:	e000      	b.n	800493a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d063      	beq.n	8004a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004946:	4b65      	ldr	r3, [pc, #404]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 030c 	and.w	r3, r3, #12
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00b      	beq.n	800496a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004952:	4b62      	ldr	r3, [pc, #392]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800495a:	2b08      	cmp	r3, #8
 800495c:	d11c      	bne.n	8004998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495e:	4b5f      	ldr	r3, [pc, #380]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d116      	bne.n	8004998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800496a:	4b5c      	ldr	r3, [pc, #368]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <HAL_RCC_OscConfig+0x152>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d001      	beq.n	8004982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e1c4      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004982:	4b56      	ldr	r3, [pc, #344]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	4952      	ldr	r1, [pc, #328]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004992:	4313      	orrs	r3, r2
 8004994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004996:	e03a      	b.n	8004a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d020      	beq.n	80049e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a0:	4b4f      	ldr	r3, [pc, #316]	; (8004ae0 <HAL_RCC_OscConfig+0x2b0>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a6:	f7fc ff27 	bl	80017f8 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ae:	f7fc ff23 	bl	80017f8 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e1a5      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c0:	4b46      	ldr	r3, [pc, #280]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049cc:	4b43      	ldr	r3, [pc, #268]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4940      	ldr	r1, [pc, #256]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]
 80049e0:	e015      	b.n	8004a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049e2:	4b3f      	ldr	r3, [pc, #252]	; (8004ae0 <HAL_RCC_OscConfig+0x2b0>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fc ff06 	bl	80017f8 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f0:	f7fc ff02 	bl	80017f8 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e184      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a02:	4b36      	ldr	r3, [pc, #216]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d030      	beq.n	8004a7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d016      	beq.n	8004a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a22:	4b30      	ldr	r3, [pc, #192]	; (8004ae4 <HAL_RCC_OscConfig+0x2b4>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fc fee6 	bl	80017f8 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a30:	f7fc fee2 	bl	80017f8 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e164      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a42:	4b26      	ldr	r3, [pc, #152]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x200>
 8004a4e:	e015      	b.n	8004a7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a50:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <HAL_RCC_OscConfig+0x2b4>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a56:	f7fc fecf 	bl	80017f8 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a5e:	f7fc fecb 	bl	80017f8 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e14d      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a70:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80a0 	beq.w	8004bca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10f      	bne.n	8004aba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	4a0e      	ldr	r2, [pc, #56]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_RCC_OscConfig+0x2b8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d121      	bne.n	8004b0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac6:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <HAL_RCC_OscConfig+0x2b8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a07      	ldr	r2, [pc, #28]	; (8004ae8 <HAL_RCC_OscConfig+0x2b8>)
 8004acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ad2:	f7fc fe91 	bl	80017f8 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad8:	e011      	b.n	8004afe <HAL_RCC_OscConfig+0x2ce>
 8004ada:	bf00      	nop
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	42470000 	.word	0x42470000
 8004ae4:	42470e80 	.word	0x42470e80
 8004ae8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aec:	f7fc fe84 	bl	80017f8 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e106      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afe:	4b85      	ldr	r3, [pc, #532]	; (8004d14 <HAL_RCC_OscConfig+0x4e4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d106      	bne.n	8004b20 <HAL_RCC_OscConfig+0x2f0>
 8004b12:	4b81      	ldr	r3, [pc, #516]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	4a80      	ldr	r2, [pc, #512]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1e:	e01c      	b.n	8004b5a <HAL_RCC_OscConfig+0x32a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d10c      	bne.n	8004b42 <HAL_RCC_OscConfig+0x312>
 8004b28:	4b7b      	ldr	r3, [pc, #492]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	4a7a      	ldr	r2, [pc, #488]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b2e:	f043 0304 	orr.w	r3, r3, #4
 8004b32:	6713      	str	r3, [r2, #112]	; 0x70
 8004b34:	4b78      	ldr	r3, [pc, #480]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	4a77      	ldr	r2, [pc, #476]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b40:	e00b      	b.n	8004b5a <HAL_RCC_OscConfig+0x32a>
 8004b42:	4b75      	ldr	r3, [pc, #468]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b46:	4a74      	ldr	r2, [pc, #464]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b48:	f023 0301 	bic.w	r3, r3, #1
 8004b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4e:	4b72      	ldr	r3, [pc, #456]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	4a71      	ldr	r2, [pc, #452]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b54:	f023 0304 	bic.w	r3, r3, #4
 8004b58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d015      	beq.n	8004b8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b62:	f7fc fe49 	bl	80017f8 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b68:	e00a      	b.n	8004b80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f7fc fe45 	bl	80017f8 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e0c5      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b80:	4b65      	ldr	r3, [pc, #404]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0ee      	beq.n	8004b6a <HAL_RCC_OscConfig+0x33a>
 8004b8c:	e014      	b.n	8004bb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b8e:	f7fc fe33 	bl	80017f8 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b94:	e00a      	b.n	8004bac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b96:	f7fc fe2f 	bl	80017f8 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e0af      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bac:	4b5a      	ldr	r3, [pc, #360]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1ee      	bne.n	8004b96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d105      	bne.n	8004bca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bbe:	4b56      	ldr	r3, [pc, #344]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	4a55      	ldr	r2, [pc, #340]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 809b 	beq.w	8004d0a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bd4:	4b50      	ldr	r3, [pc, #320]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d05c      	beq.n	8004c9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d141      	bne.n	8004c6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be8:	4b4c      	ldr	r3, [pc, #304]	; (8004d1c <HAL_RCC_OscConfig+0x4ec>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bee:	f7fc fe03 	bl	80017f8 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf6:	f7fc fdff 	bl	80017f8 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e081      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c08:	4b43      	ldr	r3, [pc, #268]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f0      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	019b      	lsls	r3, r3, #6
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	4937      	ldr	r1, [pc, #220]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c3e:	4b37      	ldr	r3, [pc, #220]	; (8004d1c <HAL_RCC_OscConfig+0x4ec>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fc fdd8 	bl	80017f8 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fc fdd4 	bl	80017f8 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e056      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c5e:	4b2e      	ldr	r3, [pc, #184]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x41c>
 8004c6a:	e04e      	b.n	8004d0a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6c:	4b2b      	ldr	r3, [pc, #172]	; (8004d1c <HAL_RCC_OscConfig+0x4ec>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c72:	f7fc fdc1 	bl	80017f8 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c7a:	f7fc fdbd 	bl	80017f8 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e03f      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8c:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f0      	bne.n	8004c7a <HAL_RCC_OscConfig+0x44a>
 8004c98:	e037      	b.n	8004d0a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e032      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ca6:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <HAL_RCC_OscConfig+0x4e8>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d028      	beq.n	8004d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d121      	bne.n	8004d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d11a      	bne.n	8004d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cdc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d111      	bne.n	8004d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d107      	bne.n	8004d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d001      	beq.n	8004d0a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40007000 	.word	0x40007000
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	42470060 	.word	0x42470060

08004d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0cc      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d34:	4b68      	ldr	r3, [pc, #416]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d90c      	bls.n	8004d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d42:	4b65      	ldr	r3, [pc, #404]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4a:	4b63      	ldr	r3, [pc, #396]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e0b8      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d020      	beq.n	8004daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d74:	4b59      	ldr	r3, [pc, #356]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	4a58      	ldr	r2, [pc, #352]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d8c:	4b53      	ldr	r3, [pc, #332]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	4a52      	ldr	r2, [pc, #328]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d98:	4b50      	ldr	r3, [pc, #320]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	494d      	ldr	r1, [pc, #308]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d044      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d107      	bne.n	8004dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dbe:	4b47      	ldr	r3, [pc, #284]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d119      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e07f      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d003      	beq.n	8004dde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d107      	bne.n	8004dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dde:	4b3f      	ldr	r3, [pc, #252]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e06f      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dee:	4b3b      	ldr	r3, [pc, #236]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e067      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dfe:	4b37      	ldr	r3, [pc, #220]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f023 0203 	bic.w	r2, r3, #3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	4934      	ldr	r1, [pc, #208]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e10:	f7fc fcf2 	bl	80017f8 <HAL_GetTick>
 8004e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e16:	e00a      	b.n	8004e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e18:	f7fc fcee 	bl	80017f8 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e04f      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2e:	4b2b      	ldr	r3, [pc, #172]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 020c 	and.w	r2, r3, #12
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d1eb      	bne.n	8004e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e40:	4b25      	ldr	r3, [pc, #148]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d20c      	bcs.n	8004e68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4e:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e032      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d008      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e74:	4b19      	ldr	r3, [pc, #100]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	4916      	ldr	r1, [pc, #88]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e92:	4b12      	ldr	r3, [pc, #72]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	490e      	ldr	r1, [pc, #56]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ea6:	f000 f821 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	091b      	lsrs	r3, r3, #4
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	490a      	ldr	r1, [pc, #40]	; (8004ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8004eb8:	5ccb      	ldrb	r3, [r1, r3]
 8004eba:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebe:	4a09      	ldr	r2, [pc, #36]	; (8004ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fc fc52 	bl	8001770 <HAL_InitTick>

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023c00 	.word	0x40023c00
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	08008700 	.word	0x08008700
 8004ee4:	20000000 	.word	0x20000000
 8004ee8:	20000004 	.word	0x20000004

08004eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	607b      	str	r3, [r7, #4]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	2300      	movs	r3, #0
 8004efe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f04:	4b67      	ldr	r3, [pc, #412]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 030c 	and.w	r3, r3, #12
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d00d      	beq.n	8004f2c <HAL_RCC_GetSysClockFreq+0x40>
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	f200 80bd 	bhi.w	8005090 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0x34>
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d003      	beq.n	8004f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f1e:	e0b7      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f20:	4b61      	ldr	r3, [pc, #388]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f22:	60bb      	str	r3, [r7, #8]
       break;
 8004f24:	e0b7      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f26:	4b61      	ldr	r3, [pc, #388]	; (80050ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004f28:	60bb      	str	r3, [r7, #8]
      break;
 8004f2a:	e0b4      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f2c:	4b5d      	ldr	r3, [pc, #372]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f36:	4b5b      	ldr	r3, [pc, #364]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d04d      	beq.n	8004fde <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f42:	4b58      	ldr	r3, [pc, #352]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	099b      	lsrs	r3, r3, #6
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f52:	f04f 0100 	mov.w	r1, #0
 8004f56:	ea02 0800 	and.w	r8, r2, r0
 8004f5a:	ea03 0901 	and.w	r9, r3, r1
 8004f5e:	4640      	mov	r0, r8
 8004f60:	4649      	mov	r1, r9
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	014b      	lsls	r3, r1, #5
 8004f6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f70:	0142      	lsls	r2, r0, #5
 8004f72:	4610      	mov	r0, r2
 8004f74:	4619      	mov	r1, r3
 8004f76:	ebb0 0008 	subs.w	r0, r0, r8
 8004f7a:	eb61 0109 	sbc.w	r1, r1, r9
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	018b      	lsls	r3, r1, #6
 8004f88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f8c:	0182      	lsls	r2, r0, #6
 8004f8e:	1a12      	subs	r2, r2, r0
 8004f90:	eb63 0301 	sbc.w	r3, r3, r1
 8004f94:	f04f 0000 	mov.w	r0, #0
 8004f98:	f04f 0100 	mov.w	r1, #0
 8004f9c:	00d9      	lsls	r1, r3, #3
 8004f9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fa2:	00d0      	lsls	r0, r2, #3
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	eb12 0208 	adds.w	r2, r2, r8
 8004fac:	eb43 0309 	adc.w	r3, r3, r9
 8004fb0:	f04f 0000 	mov.w	r0, #0
 8004fb4:	f04f 0100 	mov.w	r1, #0
 8004fb8:	0259      	lsls	r1, r3, #9
 8004fba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004fbe:	0250      	lsls	r0, r2, #9
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	f7fb fd18 	bl	8000a04 <__aeabi_uldivmod>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4613      	mov	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e04a      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	099b      	lsrs	r3, r3, #6
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fee:	f04f 0100 	mov.w	r1, #0
 8004ff2:	ea02 0400 	and.w	r4, r2, r0
 8004ff6:	ea03 0501 	and.w	r5, r3, r1
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	014b      	lsls	r3, r1, #5
 8005008:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800500c:	0142      	lsls	r2, r0, #5
 800500e:	4610      	mov	r0, r2
 8005010:	4619      	mov	r1, r3
 8005012:	1b00      	subs	r0, r0, r4
 8005014:	eb61 0105 	sbc.w	r1, r1, r5
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	018b      	lsls	r3, r1, #6
 8005022:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005026:	0182      	lsls	r2, r0, #6
 8005028:	1a12      	subs	r2, r2, r0
 800502a:	eb63 0301 	sbc.w	r3, r3, r1
 800502e:	f04f 0000 	mov.w	r0, #0
 8005032:	f04f 0100 	mov.w	r1, #0
 8005036:	00d9      	lsls	r1, r3, #3
 8005038:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800503c:	00d0      	lsls	r0, r2, #3
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	1912      	adds	r2, r2, r4
 8005044:	eb45 0303 	adc.w	r3, r5, r3
 8005048:	f04f 0000 	mov.w	r0, #0
 800504c:	f04f 0100 	mov.w	r1, #0
 8005050:	0299      	lsls	r1, r3, #10
 8005052:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005056:	0290      	lsls	r0, r2, #10
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4610      	mov	r0, r2
 800505e:	4619      	mov	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	461a      	mov	r2, r3
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	f7fb fccc 	bl	8000a04 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4613      	mov	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	0c1b      	lsrs	r3, r3, #16
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	3301      	adds	r3, #1
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	fbb2 f3f3 	udiv	r3, r2, r3
 800508c:	60bb      	str	r3, [r7, #8]
      break;
 800508e:	e002      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005092:	60bb      	str	r3, [r7, #8]
      break;
 8005094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005096:	68bb      	ldr	r3, [r7, #8]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80050a2:	bf00      	nop
 80050a4:	40023800 	.word	0x40023800
 80050a8:	00f42400 	.word	0x00f42400
 80050ac:	007a1200 	.word	0x007a1200

080050b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b4:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050b6:	681b      	ldr	r3, [r3, #0]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000000 	.word	0x20000000

080050c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050cc:	f7ff fff0 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050d0:	4602      	mov	r2, r0
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	0a9b      	lsrs	r3, r3, #10
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	4903      	ldr	r1, [pc, #12]	; (80050ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80050de:	5ccb      	ldrb	r3, [r1, r3]
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	08008710 	.word	0x08008710

080050f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e07b      	b.n	80051fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	2b00      	cmp	r3, #0
 8005108:	d108      	bne.n	800511c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005112:	d009      	beq.n	8005128 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	61da      	str	r2, [r3, #28]
 800511a:	e005      	b.n	8005128 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fc fa04 	bl	8001550 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800515e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ac:	ea42 0103 	orr.w	r1, r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	f003 0104 	and.w	r1, r3, #4
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	f003 0210 	and.w	r2, r3, #16
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005202:	b084      	sub	sp, #16
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	f107 001c 	add.w	r0, r7, #28
 8005210:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	2b01      	cmp	r3, #1
 8005218:	d122      	bne.n	8005260 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800522e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d105      	bne.n	8005254 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f949 	bl	80054ec <USB_CoreReset>
 800525a:	4603      	mov	r3, r0
 800525c:	73fb      	strb	r3, [r7, #15]
 800525e:	e01a      	b.n	8005296 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f93d 	bl	80054ec <USB_CoreReset>
 8005272:	4603      	mov	r3, r0
 8005274:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d106      	bne.n	800528a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	639a      	str	r2, [r3, #56]	; 0x38
 8005288:	e005      	b.n	8005296 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	2b01      	cmp	r3, #1
 800529a:	d10b      	bne.n	80052b4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f043 0206 	orr.w	r2, r3, #6
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f043 0220 	orr.w	r2, r3, #32
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c0:	b004      	add	sp, #16
 80052c2:	4770      	bx	lr

080052c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f043 0201 	orr.w	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f023 0201 	bic.w	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d106      	bne.n	8005334 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60da      	str	r2, [r3, #12]
 8005332:	e00b      	b.n	800534c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	60da      	str	r2, [r3, #12]
 8005346:	e001      	b.n	800534c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e003      	b.n	8005354 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800534c:	2032      	movs	r0, #50	; 0x32
 800534e:	f7fc fa5f 	bl	8001810 <HAL_Delay>

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	019b      	lsls	r3, r3, #6
 800536e:	f043 0220 	orr.w	r2, r3, #32
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3301      	adds	r3, #1
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4a09      	ldr	r2, [pc, #36]	; (80053a4 <USB_FlushTxFifo+0x48>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d901      	bls.n	8005388 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e006      	b.n	8005396 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b20      	cmp	r3, #32
 8005392:	d0f0      	beq.n	8005376 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	00030d40 	.word	0x00030d40

080053a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2210      	movs	r2, #16
 80053b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3301      	adds	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4a09      	ldr	r2, [pc, #36]	; (80053e8 <USB_FlushRxFifo+0x40>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d901      	bls.n	80053cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e006      	b.n	80053da <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	d0f0      	beq.n	80053ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	00030d40 	.word	0x00030d40

080053ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b089      	sub	sp, #36	; 0x24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	4611      	mov	r1, r2
 80053f8:	461a      	mov	r2, r3
 80053fa:	460b      	mov	r3, r1
 80053fc:	71fb      	strb	r3, [r7, #7]
 80053fe:	4613      	mov	r3, r2
 8005400:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800540a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800540e:	2b00      	cmp	r3, #0
 8005410:	d11a      	bne.n	8005448 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005412:	88bb      	ldrh	r3, [r7, #4]
 8005414:	3303      	adds	r3, #3
 8005416:	089b      	lsrs	r3, r3, #2
 8005418:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800541a:	2300      	movs	r3, #0
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	e00f      	b.n	8005440 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	031a      	lsls	r2, r3, #12
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	4413      	add	r3, r2
 8005428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542c:	461a      	mov	r2, r3
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	3304      	adds	r3, #4
 8005438:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	3301      	adds	r3, #1
 800543e:	61bb      	str	r3, [r7, #24]
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	429a      	cmp	r2, r3
 8005446:	d3eb      	bcc.n	8005420 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3724      	adds	r7, #36	; 0x24
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005456:	b480      	push	{r7}
 8005458:	b089      	sub	sp, #36	; 0x24
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	4613      	mov	r3, r2
 8005462:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800546c:	88fb      	ldrh	r3, [r7, #6]
 800546e:	3303      	adds	r3, #3
 8005470:	089b      	lsrs	r3, r3, #2
 8005472:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005474:	2300      	movs	r3, #0
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	e00b      	b.n	8005492 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	601a      	str	r2, [r3, #0]
    pDest++;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	3304      	adds	r3, #4
 800548a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	3301      	adds	r3, #1
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	429a      	cmp	r2, r3
 8005498:	d3ef      	bcc.n	800547a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800549a:	69fb      	ldr	r3, [r7, #28]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3724      	adds	r7, #36	; 0x24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4013      	ands	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054c0:	68fb      	ldr	r3, [r7, #12]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0301 	and.w	r3, r3, #1
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	3301      	adds	r3, #1
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4a13      	ldr	r2, [pc, #76]	; (8005550 <USB_CoreReset+0x64>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d901      	bls.n	800550a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e01b      	b.n	8005542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	daf2      	bge.n	80054f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f043 0201 	orr.w	r2, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3301      	adds	r3, #1
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4a09      	ldr	r2, [pc, #36]	; (8005550 <USB_CoreReset+0x64>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d901      	bls.n	8005534 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e006      	b.n	8005542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b01      	cmp	r3, #1
 800553e:	d0f0      	beq.n	8005522 <USB_CoreReset+0x36>

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	00030d40 	.word	0x00030d40

08005554 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005554:	b084      	sub	sp, #16
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	f107 001c 	add.w	r0, r7, #28
 8005562:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005570:	461a      	mov	r2, r3
 8005572:	2300      	movs	r3, #0
 8005574:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d018      	beq.n	80055d8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d10a      	bne.n	80055c2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055ba:	f043 0304 	orr.w	r3, r3, #4
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	e014      	b.n	80055ec <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055d0:	f023 0304 	bic.w	r3, r3, #4
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	e009      	b.n	80055ec <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055e6:	f023 0304 	bic.w	r3, r3, #4
 80055ea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80055ec:	2110      	movs	r1, #16
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff feb4 	bl	800535c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff fed7 	bl	80053a8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	e015      	b.n	800562c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4413      	add	r3, r2
 8005608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560c:	461a      	mov	r2, r3
 800560e:	f04f 33ff 	mov.w	r3, #4294967295
 8005612:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4413      	add	r3, r2
 800561c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005620:	461a      	mov	r2, r3
 8005622:	2300      	movs	r3, #0
 8005624:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3301      	adds	r3, #1
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	429a      	cmp	r2, r3
 8005632:	d3e5      	bcc.n	8005600 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005634:	2101      	movs	r1, #1
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f8ac 	bl	8005794 <USB_DriveVbus>

  HAL_Delay(200U);
 800563c:	20c8      	movs	r0, #200	; 0xc8
 800563e:	f7fc f8e7 	bl	8001810 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f04f 32ff 	mov.w	r2, #4294967295
 800564e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00b      	beq.n	8005674 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005662:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a14      	ldr	r2, [pc, #80]	; (80056b8 <USB_HostInit+0x164>)
 8005668:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a13      	ldr	r2, [pc, #76]	; (80056bc <USB_HostInit+0x168>)
 800566e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005672:	e009      	b.n	8005688 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2280      	movs	r2, #128	; 0x80
 8005678:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a10      	ldr	r2, [pc, #64]	; (80056c0 <USB_HostInit+0x16c>)
 800567e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a10      	ldr	r2, [pc, #64]	; (80056c4 <USB_HostInit+0x170>)
 8005684:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d105      	bne.n	800569a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f043 0210 	orr.w	r2, r3, #16
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <USB_HostInit+0x174>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056b2:	b004      	add	sp, #16
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	01000200 	.word	0x01000200
 80056bc:	00e00300 	.word	0x00e00300
 80056c0:	00600080 	.word	0x00600080
 80056c4:	004000e0 	.word	0x004000e0
 80056c8:	a3200008 	.word	0xa3200008

080056cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056ea:	f023 0303 	bic.w	r3, r3, #3
 80056ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	68f9      	ldr	r1, [r7, #12]
 8005700:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005704:	4313      	orrs	r3, r2
 8005706:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d107      	bne.n	800571e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005714:	461a      	mov	r2, r3
 8005716:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800571a:	6053      	str	r3, [r2, #4]
 800571c:	e009      	b.n	8005732 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d106      	bne.n	8005732 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800572a:	461a      	mov	r2, r3
 800572c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005730:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005760:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800576a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005770:	2064      	movs	r0, #100	; 0x64
 8005772:	f7fc f84d 	bl	8001810 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800577e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005782:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005784:	200a      	movs	r0, #10
 8005786:	f7fc f843 	bl	8001810 <HAL_Delay>

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80057b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d109      	bne.n	80057d8 <USB_DriveVbus+0x44>
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d106      	bne.n	80057d8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057d6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e2:	d109      	bne.n	80057f8 <USB_DriveVbus+0x64>
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057f6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005806:	b480      	push	{r7}
 8005808:	b085      	sub	sp, #20
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	0c5b      	lsrs	r3, r3, #17
 8005824:	f003 0303 	and.w	r3, r3, #3
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	b29b      	uxth	r3, r3
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
	...

08005858 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	4608      	mov	r0, r1
 8005862:	4611      	mov	r1, r2
 8005864:	461a      	mov	r2, r3
 8005866:	4603      	mov	r3, r0
 8005868:	70fb      	strb	r3, [r7, #3]
 800586a:	460b      	mov	r3, r1
 800586c:	70bb      	strb	r3, [r7, #2]
 800586e:	4613      	mov	r3, r2
 8005870:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4413      	add	r3, r2
 8005882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005886:	461a      	mov	r2, r3
 8005888:	f04f 33ff 	mov.w	r3, #4294967295
 800588c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800588e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005892:	2b03      	cmp	r3, #3
 8005894:	d87e      	bhi.n	8005994 <USB_HC_Init+0x13c>
 8005896:	a201      	add	r2, pc, #4	; (adr r2, 800589c <USB_HC_Init+0x44>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058ad 	.word	0x080058ad
 80058a0:	08005957 	.word	0x08005957
 80058a4:	080058ad 	.word	0x080058ad
 80058a8:	08005919 	.word	0x08005919
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b8:	461a      	mov	r2, r3
 80058ba:	f240 439d 	movw	r3, #1181	; 0x49d
 80058be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80058c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	da10      	bge.n	80058ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80058c8:	78fb      	ldrb	r3, [r7, #3]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	78fa      	ldrb	r2, [r7, #3]
 80058d8:	0151      	lsls	r1, r2, #5
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	440a      	add	r2, r1
 80058de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80058e8:	e057      	b.n	800599a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d051      	beq.n	800599a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80058f6:	78fb      	ldrb	r3, [r7, #3]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	78fa      	ldrb	r2, [r7, #3]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	440a      	add	r2, r1
 800590c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005910:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005914:	60d3      	str	r3, [r2, #12]
      break;
 8005916:	e040      	b.n	800599a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005924:	461a      	mov	r2, r3
 8005926:	f240 639d 	movw	r3, #1693	; 0x69d
 800592a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800592c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005930:	2b00      	cmp	r3, #0
 8005932:	da34      	bge.n	800599e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	4413      	add	r3, r2
 800593c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	78fa      	ldrb	r2, [r7, #3]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	440a      	add	r2, r1
 800594a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800594e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005952:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005954:	e023      	b.n	800599e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005956:	78fb      	ldrb	r3, [r7, #3]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	4413      	add	r3, r2
 800595e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005962:	461a      	mov	r2, r3
 8005964:	f240 2325 	movw	r3, #549	; 0x225
 8005968:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800596a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800596e:	2b00      	cmp	r3, #0
 8005970:	da17      	bge.n	80059a2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005972:	78fb      	ldrb	r3, [r7, #3]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4413      	add	r3, r2
 800597a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	78fa      	ldrb	r2, [r7, #3]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	440a      	add	r2, r1
 8005988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800598c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005990:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005992:	e006      	b.n	80059a2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	77fb      	strb	r3, [r7, #31]
      break;
 8005998:	e004      	b.n	80059a4 <USB_HC_Init+0x14c>
      break;
 800599a:	bf00      	nop
 800599c:	e002      	b.n	80059a4 <USB_HC_Init+0x14c>
      break;
 800599e:	bf00      	nop
 80059a0:	e000      	b.n	80059a4 <USB_HC_Init+0x14c>
      break;
 80059a2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	2101      	movs	r1, #1
 80059b4:	fa01 f303 	lsl.w	r3, r1, r3
 80059b8:	6939      	ldr	r1, [r7, #16]
 80059ba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059be:	4313      	orrs	r3, r2
 80059c0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80059ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	da03      	bge.n	80059de <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80059d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059da:	61bb      	str	r3, [r7, #24]
 80059dc:	e001      	b.n	80059e2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff ff0f 	bl	8005806 <USB_GetHostSpeed>
 80059e8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80059ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d106      	bne.n	8005a00 <USB_HC_Init+0x1a8>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d003      	beq.n	8005a00 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80059f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	e001      	b.n	8005a04 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a04:	787b      	ldrb	r3, [r7, #1]
 8005a06:	059b      	lsls	r3, r3, #22
 8005a08:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a0c:	78bb      	ldrb	r3, [r7, #2]
 8005a0e:	02db      	lsls	r3, r3, #11
 8005a10:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a14:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a1a:	049b      	lsls	r3, r3, #18
 8005a1c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a20:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a22:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a28:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a2e:	78fb      	ldrb	r3, [r7, #3]
 8005a30:	0159      	lsls	r1, r3, #5
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	440b      	add	r3, r1
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a40:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005a42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d10f      	bne.n	8005a6a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	78fa      	ldrb	r2, [r7, #3]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a68:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005a6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3720      	adds	r7, #32
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08c      	sub	sp, #48	; 0x30
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	785b      	ldrb	r3, [r3, #1]
 8005a8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a90:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d02d      	beq.n	8005afa <USB_HC_StartXfer+0x86>
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	791b      	ldrb	r3, [r3, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d129      	bne.n	8005afa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d117      	bne.n	8005adc <USB_HC_StartXfer+0x68>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	79db      	ldrb	r3, [r3, #7]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <USB_HC_StartXfer+0x48>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	79db      	ldrb	r3, [r3, #7]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d10f      	bne.n	8005adc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	0151      	lsls	r1, r2, #5
 8005ace:	6a3a      	ldr	r2, [r7, #32]
 8005ad0:	440a      	add	r2, r1
 8005ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ada:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10b      	bne.n	8005afa <USB_HC_StartXfer+0x86>
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	795b      	ldrb	r3, [r3, #5]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d107      	bne.n	8005afa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	4619      	mov	r1, r3
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 fa2f 	bl	8005f54 <USB_DoPing>
      return HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	e0f8      	b.n	8005cec <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d018      	beq.n	8005b34 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	8912      	ldrh	r2, [r2, #8]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	8912      	ldrh	r2, [r2, #8]
 8005b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b16:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005b18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005b1a:	8b7b      	ldrh	r3, [r7, #26]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d90b      	bls.n	8005b38 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005b20:	8b7b      	ldrh	r3, [r7, #26]
 8005b22:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	8912      	ldrh	r2, [r2, #8]
 8005b2a:	fb02 f203 	mul.w	r2, r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	611a      	str	r2, [r3, #16]
 8005b32:	e001      	b.n	8005b38 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005b34:	2301      	movs	r3, #1
 8005b36:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	78db      	ldrb	r3, [r3, #3]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	8912      	ldrh	r2, [r2, #8]
 8005b46:	fb02 f203 	mul.w	r2, r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	611a      	str	r2, [r3, #16]
 8005b4e:	e003      	b.n	8005b58 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	695a      	ldr	r2, [r3, #20]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b62:	04d9      	lsls	r1, r3, #19
 8005b64:	4b63      	ldr	r3, [pc, #396]	; (8005cf4 <USB_HC_StartXfer+0x280>)
 8005b66:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b68:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	7a9b      	ldrb	r3, [r3, #10]
 8005b6e:	075b      	lsls	r3, r3, #29
 8005b70:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b74:	69f9      	ldr	r1, [r7, #28]
 8005b76:	0148      	lsls	r0, r1, #5
 8005b78:	6a39      	ldr	r1, [r7, #32]
 8005b7a:	4401      	add	r1, r0
 8005b7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b80:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b82:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	68d9      	ldr	r1, [r3, #12]
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9a:	460a      	mov	r2, r1
 8005b9c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	bf0c      	ite	eq
 8005bae:	2301      	moveq	r3, #1
 8005bb0:	2300      	movne	r3, #0
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	6a3a      	ldr	r2, [r7, #32]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bd0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bd4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	7e7b      	ldrb	r3, [r7, #25]
 8005be6:	075b      	lsls	r3, r3, #29
 8005be8:	69f9      	ldr	r1, [r7, #28]
 8005bea:	0148      	lsls	r0, r1, #5
 8005bec:	6a39      	ldr	r1, [r7, #32]
 8005bee:	4401      	add	r1, r0
 8005bf0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c0e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	78db      	ldrb	r3, [r3, #3]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	e003      	b.n	8005c2a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c28:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c30:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3e:	461a      	mov	r2, r3
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e04e      	b.n	8005cec <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	78db      	ldrb	r3, [r3, #3]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d149      	bne.n	8005cea <USB_HC_StartXfer+0x276>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d045      	beq.n	8005cea <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	79db      	ldrb	r3, [r3, #7]
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d830      	bhi.n	8005cc8 <USB_HC_StartXfer+0x254>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <USB_HC_StartXfer+0x1f8>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005c7d 	.word	0x08005c7d
 8005c70:	08005ca1 	.word	0x08005ca1
 8005c74:	08005c7d 	.word	0x08005c7d
 8005c78:	08005ca1 	.word	0x08005ca1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	3303      	adds	r3, #3
 8005c82:	089b      	lsrs	r3, r3, #2
 8005c84:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c86:	8afa      	ldrh	r2, [r7, #22]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d91c      	bls.n	8005ccc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f043 0220 	orr.w	r2, r3, #32
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c9e:	e015      	b.n	8005ccc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	3303      	adds	r3, #3
 8005ca6:	089b      	lsrs	r3, r3, #2
 8005ca8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005caa:	8afa      	ldrh	r2, [r7, #22]
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d90a      	bls.n	8005cd0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005cc6:	e003      	b.n	8005cd0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005cc8:	bf00      	nop
 8005cca:	e002      	b.n	8005cd2 <USB_HC_StartXfer+0x25e>
        break;
 8005ccc:	bf00      	nop
 8005cce:	e000      	b.n	8005cd2 <USB_HC_StartXfer+0x25e>
        break;
 8005cd0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	68d9      	ldr	r1, [r3, #12]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	785a      	ldrb	r2, [r3, #1]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	9000      	str	r0, [sp, #0]
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7ff fb81 	bl	80053ec <USB_WritePacket>
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3728      	adds	r7, #40	; 0x28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	1ff80000 	.word	0x1ff80000

08005cf8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	b29b      	uxth	r3, r3
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b089      	sub	sp, #36	; 0x24
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	460b      	mov	r3, r1
 8005d24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	0c9b      	lsrs	r3, r3, #18
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	0fdb      	lsrs	r3, r3, #31
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	d104      	bne.n	8005d74 <USB_HC_Halt+0x5a>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	e0e8      	b.n	8005f46 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <USB_HC_Halt+0x66>
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d173      	bne.n	8005e68 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d9e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f040 80cb 	bne.w	8005f44 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d143      	bne.n	8005e42 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dd8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005df8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e18:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	61fb      	str	r3, [r7, #28]
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e26:	d81d      	bhi.n	8005e64 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e3e:	d0ec      	beq.n	8005e1a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e40:	e080      	b.n	8005f44 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e60:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e62:	e06f      	b.n	8005f44 <USB_HC_Halt+0x22a>
            break;
 8005e64:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e66:	e06d      	b.n	8005f44 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	0151      	lsls	r1, r2, #5
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	440a      	add	r2, r1
 8005e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e86:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d143      	bne.n	8005f20 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	0151      	lsls	r1, r2, #5
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	440a      	add	r2, r1
 8005eae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eb6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ed6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ef2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ef6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	3301      	adds	r3, #1
 8005efc:	61fb      	str	r3, [r7, #28]
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f04:	d81d      	bhi.n	8005f42 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f1c:	d0ec      	beq.n	8005ef8 <USB_HC_Halt+0x1de>
 8005f1e:	e011      	b.n	8005f44 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	e000      	b.n	8005f44 <USB_HC_Halt+0x22a>
          break;
 8005f42:	bf00      	nop
    }
  }

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3724      	adds	r7, #36	; 0x24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	04da      	lsls	r2, r3, #19
 8005f70:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <USB_DoPing+0x74>)
 8005f72:	4013      	ands	r3, r2
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f84:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f9c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fa4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	1ff80000 	.word	0x1ff80000

08005fcc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff f982 	bl	80052e6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005fe2:	2110      	movs	r1, #16
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff f9b9 	bl	800535c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff f9dc 	bl	80053a8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	613b      	str	r3, [r7, #16]
 8005ff4:	e01f      	b.n	8006036 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800600c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006014:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800601c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602a:	461a      	mov	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	3301      	adds	r3, #1
 8006034:	613b      	str	r3, [r7, #16]
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2b0f      	cmp	r3, #15
 800603a:	d9dc      	bls.n	8005ff6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800603c:	2300      	movs	r3, #0
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	e034      	b.n	80060ac <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006058:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006060:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006068:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006076:	461a      	mov	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	3301      	adds	r3, #1
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006088:	d80c      	bhi.n	80060a4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4413      	add	r3, r2
 8006092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800609c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060a0:	d0ec      	beq.n	800607c <USB_StopHost+0xb0>
 80060a2:	e000      	b.n	80060a6 <USB_StopHost+0xda>
        break;
 80060a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	3301      	adds	r3, #1
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b0f      	cmp	r3, #15
 80060b0:	d9c7      	bls.n	8006042 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b8:	461a      	mov	r2, r3
 80060ba:	f04f 33ff 	mov.w	r3, #4294967295
 80060be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f04f 32ff 	mov.w	r2, #4294967295
 80060c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff f8fb 	bl	80052c4 <USB_EnableGlobalInt>

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80060d8:	b590      	push	{r4, r7, lr}
 80060da:	b089      	sub	sp, #36	; 0x24
 80060dc:	af04      	add	r7, sp, #16
 80060de:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80060e0:	2301      	movs	r3, #1
 80060e2:	2202      	movs	r2, #2
 80060e4:	2102      	movs	r1, #2
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fc66 	bl	80069b8 <USBH_FindInterface>
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	2bff      	cmp	r3, #255	; 0xff
 80060f4:	d002      	beq.n	80060fc <USBH_CDC_InterfaceInit+0x24>
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d901      	bls.n	8006100 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80060fc:	2302      	movs	r3, #2
 80060fe:	e13d      	b.n	800637c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fc3b 	bl	8006980 <USBH_SelectInterface>
 800610a:	4603      	mov	r3, r0
 800610c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800610e:	7bbb      	ldrb	r3, [r7, #14]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006114:	2302      	movs	r3, #2
 8006116:	e131      	b.n	800637c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800611e:	2050      	movs	r0, #80	; 0x50
 8006120:	f002 fa00 	bl	8008524 <malloc>
 8006124:	4603      	mov	r3, r0
 8006126:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006138:	2302      	movs	r3, #2
 800613a:	e11f      	b.n	800637c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800613c:	2250      	movs	r2, #80	; 0x50
 800613e:	2100      	movs	r1, #0
 8006140:	68b8      	ldr	r0, [r7, #8]
 8006142:	f002 f9ff 	bl	8008544 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	211a      	movs	r1, #26
 800614c:	fb01 f303 	mul.w	r3, r1, r3
 8006150:	4413      	add	r3, r2
 8006152:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	b25b      	sxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	da15      	bge.n	800618a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	211a      	movs	r1, #26
 8006164:	fb01 f303 	mul.w	r3, r1, r3
 8006168:	4413      	add	r3, r2
 800616a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800616e:	781a      	ldrb	r2, [r3, #0]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	211a      	movs	r1, #26
 800617a:	fb01 f303 	mul.w	r3, r1, r3
 800617e:	4413      	add	r3, r2
 8006180:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006184:	881a      	ldrh	r2, [r3, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	785b      	ldrb	r3, [r3, #1]
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f001 fe32 	bl	8007dfa <USBH_AllocPipe>
 8006196:	4603      	mov	r3, r0
 8006198:	461a      	mov	r2, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	7819      	ldrb	r1, [r3, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	7858      	ldrb	r0, [r3, #1]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	8952      	ldrh	r2, [r2, #10]
 80061b6:	9202      	str	r2, [sp, #8]
 80061b8:	2203      	movs	r2, #3
 80061ba:	9201      	str	r2, [sp, #4]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	4623      	mov	r3, r4
 80061c0:	4602      	mov	r2, r0
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 fdea 	bl	8007d9c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2200      	movs	r2, #0
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f002 f8f9 	bl	80083c8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80061d6:	2300      	movs	r3, #0
 80061d8:	2200      	movs	r2, #0
 80061da:	210a      	movs	r1, #10
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fbeb 	bl	80069b8 <USBH_FindInterface>
 80061e2:	4603      	mov	r3, r0
 80061e4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	2bff      	cmp	r3, #255	; 0xff
 80061ea:	d002      	beq.n	80061f2 <USBH_CDC_InterfaceInit+0x11a>
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d901      	bls.n	80061f6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80061f2:	2302      	movs	r3, #2
 80061f4:	e0c2      	b.n	800637c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	211a      	movs	r1, #26
 80061fc:	fb01 f303 	mul.w	r3, r1, r3
 8006200:	4413      	add	r3, r2
 8006202:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	b25b      	sxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	da16      	bge.n	800623c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800620e:	7bfb      	ldrb	r3, [r7, #15]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	211a      	movs	r1, #26
 8006214:	fb01 f303 	mul.w	r3, r1, r3
 8006218:	4413      	add	r3, r2
 800621a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800621e:	781a      	ldrb	r2, [r3, #0]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	211a      	movs	r1, #26
 800622a:	fb01 f303 	mul.w	r3, r1, r3
 800622e:	4413      	add	r3, r2
 8006230:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006234:	881a      	ldrh	r2, [r3, #0]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	835a      	strh	r2, [r3, #26]
 800623a:	e015      	b.n	8006268 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	211a      	movs	r1, #26
 8006242:	fb01 f303 	mul.w	r3, r1, r3
 8006246:	4413      	add	r3, r2
 8006248:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800624c:	781a      	ldrb	r2, [r3, #0]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	211a      	movs	r1, #26
 8006258:	fb01 f303 	mul.w	r3, r1, r3
 800625c:	4413      	add	r3, r2
 800625e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006262:	881a      	ldrh	r2, [r3, #0]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	211a      	movs	r1, #26
 800626e:	fb01 f303 	mul.w	r3, r1, r3
 8006272:	4413      	add	r3, r2
 8006274:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	b25b      	sxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	da16      	bge.n	80062ae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	211a      	movs	r1, #26
 8006286:	fb01 f303 	mul.w	r3, r1, r3
 800628a:	4413      	add	r3, r2
 800628c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006290:	781a      	ldrb	r2, [r3, #0]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	211a      	movs	r1, #26
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80062a6:	881a      	ldrh	r2, [r3, #0]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	835a      	strh	r2, [r3, #26]
 80062ac:	e015      	b.n	80062da <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	211a      	movs	r1, #26
 80062b4:	fb01 f303 	mul.w	r3, r1, r3
 80062b8:	4413      	add	r3, r2
 80062ba:	f203 3356 	addw	r3, r3, #854	; 0x356
 80062be:	781a      	ldrb	r2, [r3, #0]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	211a      	movs	r1, #26
 80062ca:	fb01 f303 	mul.w	r3, r1, r3
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80062d4:	881a      	ldrh	r2, [r3, #0]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	7b9b      	ldrb	r3, [r3, #14]
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 fd8a 	bl	8007dfa <USBH_AllocPipe>
 80062e6:	4603      	mov	r3, r0
 80062e8:	461a      	mov	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	7bdb      	ldrb	r3, [r3, #15]
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 fd80 	bl	8007dfa <USBH_AllocPipe>
 80062fa:	4603      	mov	r3, r0
 80062fc:	461a      	mov	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	7b59      	ldrb	r1, [r3, #13]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	7b98      	ldrb	r0, [r3, #14]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	8b12      	ldrh	r2, [r2, #24]
 800631a:	9202      	str	r2, [sp, #8]
 800631c:	2202      	movs	r2, #2
 800631e:	9201      	str	r2, [sp, #4]
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	4623      	mov	r3, r4
 8006324:	4602      	mov	r2, r0
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 fd38 	bl	8007d9c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	7b19      	ldrb	r1, [r3, #12]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	7bd8      	ldrb	r0, [r3, #15]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	8b52      	ldrh	r2, [r2, #26]
 8006344:	9202      	str	r2, [sp, #8]
 8006346:	2202      	movs	r2, #2
 8006348:	9201      	str	r2, [sp, #4]
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	4623      	mov	r3, r4
 800634e:	4602      	mov	r2, r0
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f001 fd23 	bl	8007d9c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	7b5b      	ldrb	r3, [r3, #13]
 8006362:	2200      	movs	r2, #0
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f002 f82e 	bl	80083c8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	7b1b      	ldrb	r3, [r3, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f002 f827 	bl	80083c8 <USBH_LL_SetToggle>

  return USBH_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	bd90      	pop	{r4, r7, pc}

08006384 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00e      	beq.n	80063bc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 fd18 	bl	8007dda <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 fd43 	bl	8007e3c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	7b1b      	ldrb	r3, [r3, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00e      	beq.n	80063e2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	7b1b      	ldrb	r3, [r3, #12]
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f001 fd05 	bl	8007dda <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	7b1b      	ldrb	r3, [r3, #12]
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f001 fd30 	bl	8007e3c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	7b5b      	ldrb	r3, [r3, #13]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00e      	beq.n	8006408 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	7b5b      	ldrb	r3, [r3, #13]
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 fcf2 	bl	8007dda <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	7b5b      	ldrb	r3, [r3, #13]
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 fd1d 	bl	8007e3c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00b      	beq.n	800642c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	4618      	mov	r0, r3
 800641e:	f002 f889 	bl	8008534 <free>
    phost->pActiveClass->pData = 0U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006428:	2200      	movs	r2, #0
 800642a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3340      	adds	r3, #64	; 0x40
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f8b1 	bl	80065b6 <GetLineCoding>
 8006454:	4603      	mov	r3, r0
 8006456:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006458:	7afb      	ldrb	r3, [r7, #11]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d105      	bne.n	800646a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006464:	2102      	movs	r1, #2
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800646a:	7afb      	ldrb	r3, [r7, #11]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800647c:	2301      	movs	r3, #1
 800647e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006494:	2b04      	cmp	r3, #4
 8006496:	d877      	bhi.n	8006588 <USBH_CDC_Process+0x114>
 8006498:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <USBH_CDC_Process+0x2c>)
 800649a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649e:	bf00      	nop
 80064a0:	080064b5 	.word	0x080064b5
 80064a4:	080064bb 	.word	0x080064bb
 80064a8:	080064eb 	.word	0x080064eb
 80064ac:	0800655f 	.word	0x0800655f
 80064b0:	0800656d 	.word	0x0800656d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	73fb      	strb	r3, [r7, #15]
      break;
 80064b8:	e06d      	b.n	8006596 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f897 	bl	80065f4 <SetLineCoding>
 80064c6:	4603      	mov	r3, r0
 80064c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d104      	bne.n	80064da <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80064d8:	e058      	b.n	800658c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80064da:	7bbb      	ldrb	r3, [r7, #14]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d055      	beq.n	800658c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2204      	movs	r2, #4
 80064e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80064e8:	e050      	b.n	800658c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	3340      	adds	r3, #64	; 0x40
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f860 	bl	80065b6 <GetLineCoding>
 80064f6:	4603      	mov	r3, r0
 80064f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d126      	bne.n	800654e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006512:	791b      	ldrb	r3, [r3, #4]
 8006514:	429a      	cmp	r2, r3
 8006516:	d13b      	bne.n	8006590 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006522:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006524:	429a      	cmp	r2, r3
 8006526:	d133      	bne.n	8006590 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006532:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006534:	429a      	cmp	r2, r3
 8006536:	d12b      	bne.n	8006590 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006540:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006542:	429a      	cmp	r2, r3
 8006544:	d124      	bne.n	8006590 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f958 	bl	80067fc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800654c:	e020      	b.n	8006590 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d01d      	beq.n	8006590 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2204      	movs	r2, #4
 8006558:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800655c:	e018      	b.n	8006590 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f867 	bl	8006632 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f8da 	bl	800671e <CDC_ProcessReception>
      break;
 800656a:	e014      	b.n	8006596 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800656c:	2100      	movs	r1, #0
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 ffe3 	bl	800753a <USBH_ClrFeature>
 8006574:	4603      	mov	r3, r0
 8006576:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006578:	7bbb      	ldrb	r3, [r7, #14]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006586:	e005      	b.n	8006594 <USBH_CDC_Process+0x120>

    default:
      break;
 8006588:	bf00      	nop
 800658a:	e004      	b.n	8006596 <USBH_CDC_Process+0x122>
      break;
 800658c:	bf00      	nop
 800658e:	e002      	b.n	8006596 <USBH_CDC_Process+0x122>
      break;
 8006590:	bf00      	nop
 8006592:	e000      	b.n	8006596 <USBH_CDC_Process+0x122>
      break;
 8006594:	bf00      	nop

  }

  return status;
 8006596:	7bfb      	ldrb	r3, [r7, #15]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b082      	sub	sp, #8
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	22a1      	movs	r2, #161	; 0xa1
 80065c4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2221      	movs	r2, #33	; 0x21
 80065ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2207      	movs	r2, #7
 80065dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2207      	movs	r2, #7
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 f988 	bl	80078fa <USBH_CtlReq>
 80065ea:	4603      	mov	r3, r0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2221      	movs	r2, #33	; 0x21
 8006602:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2207      	movs	r2, #7
 800661a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2207      	movs	r2, #7
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 f969 	bl	80078fa <USBH_CtlReq>
 8006628:	4603      	mov	r3, r0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af02      	add	r7, sp, #8
 8006638:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006644:	2300      	movs	r3, #0
 8006646:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800664e:	2b01      	cmp	r3, #1
 8006650:	d002      	beq.n	8006658 <CDC_ProcessTransmission+0x26>
 8006652:	2b02      	cmp	r3, #2
 8006654:	d023      	beq.n	800669e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006656:	e05e      	b.n	8006716 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	8b12      	ldrh	r2, [r2, #24]
 8006660:	4293      	cmp	r3, r2
 8006662:	d90b      	bls.n	800667c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	69d9      	ldr	r1, [r3, #28]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8b1a      	ldrh	r2, [r3, #24]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	7b5b      	ldrb	r3, [r3, #13]
 8006670:	2001      	movs	r0, #1
 8006672:	9000      	str	r0, [sp, #0]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 fb4e 	bl	8007d16 <USBH_BulkSendData>
 800667a:	e00b      	b.n	8006694 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	7b5b      	ldrb	r3, [r3, #13]
 800668a:	2001      	movs	r0, #1
 800668c:	9000      	str	r0, [sp, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 fb41 	bl	8007d16 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800669c:	e03b      	b.n	8006716 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	7b5b      	ldrb	r3, [r3, #13]
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 fe65 	bl	8008374 <USBH_LL_GetURBState>
 80066aa:	4603      	mov	r3, r0
 80066ac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80066ae:	7afb      	ldrb	r3, [r7, #11]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d128      	bne.n	8006706 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	8b12      	ldrh	r2, [r2, #24]
 80066bc:	4293      	cmp	r3, r2
 80066be:	d90e      	bls.n	80066de <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	8b12      	ldrh	r2, [r2, #24]
 80066c8:	1a9a      	subs	r2, r3, r2
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	8b12      	ldrh	r2, [r2, #24]
 80066d6:	441a      	add	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	61da      	str	r2, [r3, #28]
 80066dc:	e002      	b.n	80066e4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d004      	beq.n	80066f6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80066f4:	e00e      	b.n	8006714 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f868 	bl	80067d4 <USBH_CDC_TransmitCallback>
      break;
 8006704:	e006      	b.n	8006714 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006706:	7afb      	ldrb	r3, [r7, #11]
 8006708:	2b02      	cmp	r3, #2
 800670a:	d103      	bne.n	8006714 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006714:	bf00      	nop
  }
}
 8006716:	bf00      	nop
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b086      	sub	sp, #24
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006730:	2300      	movs	r3, #0
 8006732:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800673a:	2b03      	cmp	r3, #3
 800673c:	d002      	beq.n	8006744 <CDC_ProcessReception+0x26>
 800673e:	2b04      	cmp	r3, #4
 8006740:	d00e      	beq.n	8006760 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006742:	e043      	b.n	80067cc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	6a19      	ldr	r1, [r3, #32]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	8b5a      	ldrh	r2, [r3, #26]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	7b1b      	ldrb	r3, [r3, #12]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 fb05 	bl	8007d60 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2204      	movs	r2, #4
 800675a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800675e:	e035      	b.n	80067cc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	7b1b      	ldrb	r3, [r3, #12]
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 fe04 	bl	8008374 <USBH_LL_GetURBState>
 800676c:	4603      	mov	r3, r0
 800676e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006770:	7cfb      	ldrb	r3, [r7, #19]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d129      	bne.n	80067ca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	7b1b      	ldrb	r3, [r3, #12]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 fd67 	bl	8008250 <USBH_LL_GetLastXferSize>
 8006782:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	429a      	cmp	r2, r3
 800678c:	d016      	beq.n	80067bc <CDC_ProcessReception+0x9e>
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	8b5b      	ldrh	r3, [r3, #26]
 8006792:	461a      	mov	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4293      	cmp	r3, r2
 8006798:	d910      	bls.n	80067bc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	1ad2      	subs	r2, r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	6a1a      	ldr	r2, [r3, #32]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	441a      	add	r2, r3
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2203      	movs	r2, #3
 80067b6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80067ba:	e006      	b.n	80067ca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f80f 	bl	80067e8 <USBH_CDC_ReceiveCallback>
      break;
 80067ca:	bf00      	nop
  }
}
 80067cc:	bf00      	nop
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	4613      	mov	r3, r2
 800681c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006824:	2302      	movs	r3, #2
 8006826:	e029      	b.n	800687c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	79fa      	ldrb	r2, [r7, #7]
 800682c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 f81f 	bl	8006884 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f001 fc37 	bl	80080e8 <USBH_LL_Init>

  return USBH_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	e009      	b.n	80068aa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	33e0      	adds	r3, #224	; 0xe0
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	2200      	movs	r2, #0
 80068a2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3301      	adds	r3, #1
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b0e      	cmp	r3, #14
 80068ae:	d9f2      	bls.n	8006896 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	e009      	b.n	80068ca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80068c0:	2200      	movs	r2, #0
 80068c2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3301      	adds	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068d0:	d3f1      	bcc.n	80068b6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2240      	movs	r2, #64	; 0x40
 80068f6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d016      	beq.n	800696e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10e      	bne.n	8006968 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006950:	1c59      	adds	r1, r3, #1
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	33de      	adds	r3, #222	; 0xde
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	73fb      	strb	r3, [r7, #15]
 8006966:	e004      	b.n	8006972 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006968:	2302      	movs	r3, #2
 800696a:	73fb      	strb	r3, [r7, #15]
 800696c:	e001      	b.n	8006972 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800696e:	2302      	movs	r3, #2
 8006970:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006996:	78fa      	ldrb	r2, [r7, #3]
 8006998:	429a      	cmp	r2, r3
 800699a:	d204      	bcs.n	80069a6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	78fa      	ldrb	r2, [r7, #3]
 80069a0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80069a4:	e001      	b.n	80069aa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80069a6:	2302      	movs	r3, #2
 80069a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	4608      	mov	r0, r1
 80069c2:	4611      	mov	r1, r2
 80069c4:	461a      	mov	r2, r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	70fb      	strb	r3, [r7, #3]
 80069ca:	460b      	mov	r3, r1
 80069cc:	70bb      	strb	r3, [r7, #2]
 80069ce:	4613      	mov	r3, r2
 80069d0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80069e0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80069e2:	e025      	b.n	8006a30 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	221a      	movs	r2, #26
 80069e8:	fb02 f303 	mul.w	r3, r2, r3
 80069ec:	3308      	adds	r3, #8
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	4413      	add	r3, r2
 80069f2:	3302      	adds	r3, #2
 80069f4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	795b      	ldrb	r3, [r3, #5]
 80069fa:	78fa      	ldrb	r2, [r7, #3]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d002      	beq.n	8006a06 <USBH_FindInterface+0x4e>
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	2bff      	cmp	r3, #255	; 0xff
 8006a04:	d111      	bne.n	8006a2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a0a:	78ba      	ldrb	r2, [r7, #2]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d002      	beq.n	8006a16 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a10:	78bb      	ldrb	r3, [r7, #2]
 8006a12:	2bff      	cmp	r3, #255	; 0xff
 8006a14:	d109      	bne.n	8006a2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a1a:	787a      	ldrb	r2, [r7, #1]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d002      	beq.n	8006a26 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a20:	787b      	ldrb	r3, [r7, #1]
 8006a22:	2bff      	cmp	r3, #255	; 0xff
 8006a24:	d101      	bne.n	8006a2a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	e006      	b.n	8006a38 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d9d6      	bls.n	80069e4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006a36:	23ff      	movs	r3, #255	; 0xff
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 fb87 	bl	8008160 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006a52:	2101      	movs	r1, #1
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 fca0 	bl	800839a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af04      	add	r7, sp, #16
 8006a6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d102      	bne.n	8006a86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2203      	movs	r2, #3
 8006a84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b0b      	cmp	r3, #11
 8006a8e:	f200 81b3 	bhi.w	8006df8 <USBH_Process+0x394>
 8006a92:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <USBH_Process+0x34>)
 8006a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a98:	08006ac9 	.word	0x08006ac9
 8006a9c:	08006afb 	.word	0x08006afb
 8006aa0:	08006b63 	.word	0x08006b63
 8006aa4:	08006d93 	.word	0x08006d93
 8006aa8:	08006df9 	.word	0x08006df9
 8006aac:	08006c07 	.word	0x08006c07
 8006ab0:	08006d39 	.word	0x08006d39
 8006ab4:	08006c3d 	.word	0x08006c3d
 8006ab8:	08006c5d 	.word	0x08006c5d
 8006abc:	08006c7d 	.word	0x08006c7d
 8006ac0:	08006cab 	.word	0x08006cab
 8006ac4:	08006d7b 	.word	0x08006d7b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 8193 	beq.w	8006dfc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006adc:	20c8      	movs	r0, #200	; 0xc8
 8006ade:	f001 fca3 	bl	8008428 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f001 fb99 	bl	800821a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006af8:	e180      	b.n	8006dfc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d107      	bne.n	8006b14 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b12:	e182      	b.n	8006e1a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b1e:	d914      	bls.n	8006b4a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006b26:	3301      	adds	r3, #1
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d903      	bls.n	8006b42 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	220d      	movs	r2, #13
 8006b3e:	701a      	strb	r2, [r3, #0]
      break;
 8006b40:	e16b      	b.n	8006e1a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	701a      	strb	r2, [r3, #0]
      break;
 8006b48:	e167      	b.n	8006e1a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b50:	f103 020a 	add.w	r2, r3, #10
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006b5a:	200a      	movs	r0, #10
 8006b5c:	f001 fc64 	bl	8008428 <USBH_Delay>
      break;
 8006b60:	e15b      	b.n	8006e1a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b72:	2104      	movs	r1, #4
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006b78:	2064      	movs	r0, #100	; 0x64
 8006b7a:	f001 fc55 	bl	8008428 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 fb24 	bl	80081cc <USBH_LL_GetSpeed>
 8006b84:	4603      	mov	r3, r0
 8006b86:	461a      	mov	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2205      	movs	r2, #5
 8006b92:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006b94:	2100      	movs	r1, #0
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 f92f 	bl	8007dfa <USBH_AllocPipe>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006ba4:	2180      	movs	r1, #128	; 0x80
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 f927 	bl	8007dfa <USBH_AllocPipe>
 8006bac:	4603      	mov	r3, r0
 8006bae:	461a      	mov	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	7919      	ldrb	r1, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006bc8:	b292      	uxth	r2, r2
 8006bca:	9202      	str	r2, [sp, #8]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	9201      	str	r2, [sp, #4]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2280      	movs	r2, #128	; 0x80
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 f8e0 	bl	8007d9c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	7959      	ldrb	r1, [r3, #5]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006bf0:	b292      	uxth	r2, r2
 8006bf2:	9202      	str	r2, [sp, #8]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	9201      	str	r2, [sp, #4]
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f001 f8cc 	bl	8007d9c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c04:	e109      	b.n	8006e1a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f90c 	bl	8006e24 <USBH_HandleEnum>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f040 80f3 	bne.w	8006e00 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d103      	bne.n	8006c34 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2208      	movs	r2, #8
 8006c30:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006c32:	e0e5      	b.n	8006e00 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2207      	movs	r2, #7
 8006c38:	701a      	strb	r2, [r3, #0]
      break;
 8006c3a:	e0e1      	b.n	8006e00 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 80de 	beq.w	8006e04 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c4e:	2101      	movs	r1, #1
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2208      	movs	r2, #8
 8006c58:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c5a:	e0d3      	b.n	8006e04 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fc20 	bl	80074ac <USBH_SetCfg>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f040 80ca 	bne.w	8006e08 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2209      	movs	r2, #9
 8006c78:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c7a:	e0c5      	b.n	8006e08 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00b      	beq.n	8006ca2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fc30 	bl	80074f2 <USBH_SetFeature>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f040 80b9 	bne.w	8006e0c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	220a      	movs	r2, #10
 8006c9e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ca0:	e0b4      	b.n	8006e0c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	220a      	movs	r2, #10
 8006ca6:	701a      	strb	r2, [r3, #0]
      break;
 8006ca8:	e0b0      	b.n	8006e0c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80ad 	beq.w	8006e10 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	73fb      	strb	r3, [r7, #15]
 8006cc2:	e016      	b.n	8006cf2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006cc4:	7bfa      	ldrb	r2, [r7, #15]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	32de      	adds	r2, #222	; 0xde
 8006cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cce:	791a      	ldrb	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d108      	bne.n	8006cec <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006cda:	7bfa      	ldrb	r2, [r7, #15]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	32de      	adds	r2, #222	; 0xde
 8006ce0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006cea:	e005      	b.n	8006cf8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	73fb      	strb	r3, [r7, #15]
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0e5      	beq.n	8006cc4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d016      	beq.n	8006d30 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d109      	bne.n	8006d28 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2206      	movs	r2, #6
 8006d18:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d20:	2103      	movs	r1, #3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d26:	e073      	b.n	8006e10 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	220d      	movs	r2, #13
 8006d2c:	701a      	strb	r2, [r3, #0]
      break;
 8006d2e:	e06f      	b.n	8006e10 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	220d      	movs	r2, #13
 8006d34:	701a      	strb	r2, [r3, #0]
      break;
 8006d36:	e06b      	b.n	8006e10 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d017      	beq.n	8006d72 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
 8006d4e:	4603      	mov	r3, r0
 8006d50:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d103      	bne.n	8006d62 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	220b      	movs	r2, #11
 8006d5e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d60:	e058      	b.n	8006e14 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d154      	bne.n	8006e14 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	220d      	movs	r2, #13
 8006d6e:	701a      	strb	r2, [r3, #0]
      break;
 8006d70:	e050      	b.n	8006e14 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	220d      	movs	r2, #13
 8006d76:	701a      	strb	r2, [r3, #0]
      break;
 8006d78:	e04c      	b.n	8006e14 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d049      	beq.n	8006e18 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	4798      	blx	r3
      }
      break;
 8006d90:	e042      	b.n	8006e18 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff fd72 	bl	8006884 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d009      	beq.n	8006dbe <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dce:	2105      	movs	r1, #5
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d107      	bne.n	8006df0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff fe2b 	bl	8006a44 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006dee:	e014      	b.n	8006e1a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 f9b5 	bl	8008160 <USBH_LL_Start>
      break;
 8006df6:	e010      	b.n	8006e1a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006df8:	bf00      	nop
 8006dfa:	e00e      	b.n	8006e1a <USBH_Process+0x3b6>
      break;
 8006dfc:	bf00      	nop
 8006dfe:	e00c      	b.n	8006e1a <USBH_Process+0x3b6>
      break;
 8006e00:	bf00      	nop
 8006e02:	e00a      	b.n	8006e1a <USBH_Process+0x3b6>
    break;
 8006e04:	bf00      	nop
 8006e06:	e008      	b.n	8006e1a <USBH_Process+0x3b6>
      break;
 8006e08:	bf00      	nop
 8006e0a:	e006      	b.n	8006e1a <USBH_Process+0x3b6>
      break;
 8006e0c:	bf00      	nop
 8006e0e:	e004      	b.n	8006e1a <USBH_Process+0x3b6>
      break;
 8006e10:	bf00      	nop
 8006e12:	e002      	b.n	8006e1a <USBH_Process+0x3b6>
      break;
 8006e14:	bf00      	nop
 8006e16:	e000      	b.n	8006e1a <USBH_Process+0x3b6>
      break;
 8006e18:	bf00      	nop
  }
  return USBH_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b088      	sub	sp, #32
 8006e28:	af04      	add	r7, sp, #16
 8006e2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006e30:	2301      	movs	r3, #1
 8006e32:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b07      	cmp	r3, #7
 8006e3a:	f200 81c1 	bhi.w	80071c0 <USBH_HandleEnum+0x39c>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <USBH_HandleEnum+0x20>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e65 	.word	0x08006e65
 8006e48:	08006f23 	.word	0x08006f23
 8006e4c:	08006f8d 	.word	0x08006f8d
 8006e50:	0800701b 	.word	0x0800701b
 8006e54:	08007085 	.word	0x08007085
 8006e58:	080070f5 	.word	0x080070f5
 8006e5c:	0800713b 	.word	0x0800713b
 8006e60:	08007181 	.word	0x08007181
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006e64:	2108      	movs	r1, #8
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa50 	bl	800730c <USBH_Get_DevDesc>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d130      	bne.n	8006ed8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	7919      	ldrb	r1, [r3, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006e9a:	b292      	uxth	r2, r2
 8006e9c:	9202      	str	r2, [sp, #8]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	9201      	str	r2, [sp, #4]
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2280      	movs	r2, #128	; 0x80
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 ff77 	bl	8007d9c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7959      	ldrb	r1, [r3, #5]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ec2:	b292      	uxth	r2, r2
 8006ec4:	9202      	str	r2, [sp, #8]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	9201      	str	r2, [sp, #4]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2200      	movs	r2, #0
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 ff63 	bl	8007d9c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006ed6:	e175      	b.n	80071c4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	f040 8172 	bne.w	80071c4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d903      	bls.n	8006f02 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	220d      	movs	r2, #13
 8006efe:	701a      	strb	r2, [r3, #0]
      break;
 8006f00:	e160      	b.n	80071c4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	795b      	ldrb	r3, [r3, #5]
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 ff97 	bl	8007e3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	791b      	ldrb	r3, [r3, #4]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 ff91 	bl	8007e3c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	701a      	strb	r2, [r3, #0]
      break;
 8006f20:	e150      	b.n	80071c4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006f22:	2112      	movs	r1, #18
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f9f1 	bl	800730c <USBH_Get_DevDesc>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d103      	bne.n	8006f3c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f3a:	e145      	b.n	80071c8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	f040 8142 	bne.w	80071c8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d903      	bls.n	8006f66 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	220d      	movs	r2, #13
 8006f62:	701a      	strb	r2, [r3, #0]
      break;
 8006f64:	e130      	b.n	80071c8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	795b      	ldrb	r3, [r3, #5]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 ff65 	bl	8007e3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	791b      	ldrb	r3, [r3, #4]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 ff5f 	bl	8007e3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	701a      	strb	r2, [r3, #0]
      break;
 8006f8a:	e11d      	b.n	80071c8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa68 	bl	8007464 <USBH_SetAddress>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d132      	bne.n	8007004 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006f9e:	2002      	movs	r0, #2
 8006fa0:	f001 fa42 	bl	8008428 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2203      	movs	r2, #3
 8006fb0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	7919      	ldrb	r1, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006fc6:	b292      	uxth	r2, r2
 8006fc8:	9202      	str	r2, [sp, #8]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	9201      	str	r2, [sp, #4]
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2280      	movs	r2, #128	; 0x80
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fee1 	bl	8007d9c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	7959      	ldrb	r1, [r3, #5]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006fee:	b292      	uxth	r2, r2
 8006ff0:	9202      	str	r2, [sp, #8]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	9201      	str	r2, [sp, #4]
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fecd 	bl	8007d9c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007002:	e0e3      	b.n	80071cc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	2b03      	cmp	r3, #3
 8007008:	f040 80e0 	bne.w	80071cc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	220d      	movs	r2, #13
 8007010:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	705a      	strb	r2, [r3, #1]
      break;
 8007018:	e0d8      	b.n	80071cc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800701a:	2109      	movs	r1, #9
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f99d 	bl	800735c <USBH_Get_CfgDesc>
 8007022:	4603      	mov	r3, r0
 8007024:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007026:	7bbb      	ldrb	r3, [r7, #14]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d103      	bne.n	8007034 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2204      	movs	r2, #4
 8007030:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007032:	e0cd      	b.n	80071d0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007034:	7bbb      	ldrb	r3, [r7, #14]
 8007036:	2b03      	cmp	r3, #3
 8007038:	f040 80ca 	bne.w	80071d0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007042:	3301      	adds	r3, #1
 8007044:	b2da      	uxtb	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007052:	2b03      	cmp	r3, #3
 8007054:	d903      	bls.n	800705e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	220d      	movs	r2, #13
 800705a:	701a      	strb	r2, [r3, #0]
      break;
 800705c:	e0b8      	b.n	80071d0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	795b      	ldrb	r3, [r3, #5]
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fee9 	bl	8007e3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	791b      	ldrb	r3, [r3, #4]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fee3 	bl	8007e3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	701a      	strb	r2, [r3, #0]
      break;
 8007082:	e0a5      	b.n	80071d0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f965 	bl	800735c <USBH_Get_CfgDesc>
 8007092:	4603      	mov	r3, r0
 8007094:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007096:	7bbb      	ldrb	r3, [r7, #14]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d103      	bne.n	80070a4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2205      	movs	r2, #5
 80070a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070a2:	e097      	b.n	80071d4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070a4:	7bbb      	ldrb	r3, [r7, #14]
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	f040 8094 	bne.w	80071d4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070b2:	3301      	adds	r3, #1
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d903      	bls.n	80070ce <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	220d      	movs	r2, #13
 80070ca:	701a      	strb	r2, [r3, #0]
      break;
 80070cc:	e082      	b.n	80071d4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	795b      	ldrb	r3, [r3, #5]
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 feb1 	bl	8007e3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	791b      	ldrb	r3, [r3, #4]
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 feab 	bl	8007e3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	701a      	strb	r2, [r3, #0]
      break;
 80070f2:	e06f      	b.n	80071d4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d019      	beq.n	8007132 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800710a:	23ff      	movs	r3, #255	; 0xff
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f949 	bl	80073a4 <USBH_Get_StringDesc>
 8007112:	4603      	mov	r3, r0
 8007114:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d103      	bne.n	8007124 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2206      	movs	r2, #6
 8007120:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007122:	e059      	b.n	80071d8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007124:	7bbb      	ldrb	r3, [r7, #14]
 8007126:	2b03      	cmp	r3, #3
 8007128:	d156      	bne.n	80071d8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2206      	movs	r2, #6
 800712e:	705a      	strb	r2, [r3, #1]
      break;
 8007130:	e052      	b.n	80071d8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2206      	movs	r2, #6
 8007136:	705a      	strb	r2, [r3, #1]
      break;
 8007138:	e04e      	b.n	80071d8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007140:	2b00      	cmp	r3, #0
 8007142:	d019      	beq.n	8007178 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007150:	23ff      	movs	r3, #255	; 0xff
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f926 	bl	80073a4 <USBH_Get_StringDesc>
 8007158:	4603      	mov	r3, r0
 800715a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d103      	bne.n	800716a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2207      	movs	r2, #7
 8007166:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007168:	e038      	b.n	80071dc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	2b03      	cmp	r3, #3
 800716e:	d135      	bne.n	80071dc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2207      	movs	r2, #7
 8007174:	705a      	strb	r2, [r3, #1]
      break;
 8007176:	e031      	b.n	80071dc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2207      	movs	r2, #7
 800717c:	705a      	strb	r2, [r3, #1]
      break;
 800717e:	e02d      	b.n	80071dc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007186:	2b00      	cmp	r3, #0
 8007188:	d017      	beq.n	80071ba <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007196:	23ff      	movs	r3, #255	; 0xff
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f903 	bl	80073a4 <USBH_Get_StringDesc>
 800719e:	4603      	mov	r3, r0
 80071a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80071ac:	e018      	b.n	80071e0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071ae:	7bbb      	ldrb	r3, [r7, #14]
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d115      	bne.n	80071e0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	73fb      	strb	r3, [r7, #15]
      break;
 80071b8:	e012      	b.n	80071e0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]
      break;
 80071be:	e00f      	b.n	80071e0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80071c0:	bf00      	nop
 80071c2:	e00e      	b.n	80071e2 <USBH_HandleEnum+0x3be>
      break;
 80071c4:	bf00      	nop
 80071c6:	e00c      	b.n	80071e2 <USBH_HandleEnum+0x3be>
      break;
 80071c8:	bf00      	nop
 80071ca:	e00a      	b.n	80071e2 <USBH_HandleEnum+0x3be>
      break;
 80071cc:	bf00      	nop
 80071ce:	e008      	b.n	80071e2 <USBH_HandleEnum+0x3be>
      break;
 80071d0:	bf00      	nop
 80071d2:	e006      	b.n	80071e2 <USBH_HandleEnum+0x3be>
      break;
 80071d4:	bf00      	nop
 80071d6:	e004      	b.n	80071e2 <USBH_HandleEnum+0x3be>
      break;
 80071d8:	bf00      	nop
 80071da:	e002      	b.n	80071e2 <USBH_HandleEnum+0x3be>
      break;
 80071dc:	bf00      	nop
 80071de:	e000      	b.n	80071e2 <USBH_HandleEnum+0x3be>
      break;
 80071e0:	bf00      	nop
  }
  return Status;
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b082      	sub	sp, #8
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f804 	bl	800722e <USBH_HandleSof>
}
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b0b      	cmp	r3, #11
 800723e:	d10a      	bne.n	8007256 <USBH_HandleSof+0x28>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007246:	2b00      	cmp	r3, #0
 8007248:	d005      	beq.n	8007256 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
  }
}
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800726e:	bf00      	nop
}
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800728a:	bf00      	nop
}
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007296:	b480      	push	{r7}
 8007298:	b083      	sub	sp, #12
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 ff56 	bl	8008196 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	791b      	ldrb	r3, [r3, #4]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fda3 	bl	8007e3c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	795b      	ldrb	r3, [r3, #5]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fd9d 	bl	8007e3c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af02      	add	r7, sp, #8
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	b29b      	uxth	r3, r3
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	4613      	mov	r3, r2
 8007326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800732a:	2100      	movs	r1, #0
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f864 	bl	80073fa <USBH_GetDescriptor>
 8007332:	4603      	mov	r3, r0
 8007334:	73fb      	strb	r3, [r7, #15]
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007348:	78fa      	ldrb	r2, [r7, #3]
 800734a:	b292      	uxth	r2, r2
 800734c:	4619      	mov	r1, r3
 800734e:	f000 f918 	bl	8007582 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007352:	7bfb      	ldrb	r3, [r7, #15]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af02      	add	r7, sp, #8
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	331c      	adds	r3, #28
 800736c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800736e:	887b      	ldrh	r3, [r7, #2]
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007378:	2100      	movs	r1, #0
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f83d 	bl	80073fa <USBH_GetDescriptor>
 8007380:	4603      	mov	r3, r0
 8007382:	72fb      	strb	r3, [r7, #11]
 8007384:	7afb      	ldrb	r3, [r7, #11]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d107      	bne.n	800739a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007390:	887a      	ldrh	r2, [r7, #2]
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	4618      	mov	r0, r3
 8007396:	f000 f964 	bl	8007662 <USBH_ParseCfgDesc>
  }

  return status;
 800739a:	7afb      	ldrb	r3, [r7, #11]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b088      	sub	sp, #32
 80073a8:	af02      	add	r7, sp, #8
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	607a      	str	r2, [r7, #4]
 80073ae:	461a      	mov	r2, r3
 80073b0:	460b      	mov	r3, r1
 80073b2:	72fb      	strb	r3, [r7, #11]
 80073b4:	4613      	mov	r3, r2
 80073b6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80073b8:	7afb      	ldrb	r3, [r7, #11]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80073c0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80073c8:	893b      	ldrh	r3, [r7, #8]
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	460b      	mov	r3, r1
 80073ce:	2100      	movs	r1, #0
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 f812 	bl	80073fa <USBH_GetDescriptor>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75fb      	strb	r3, [r7, #23]
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d107      	bne.n	80073f0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80073e6:	893a      	ldrh	r2, [r7, #8]
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 fa37 	bl	800785e <USBH_ParseStringDesc>
  }

  return status;
 80073f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	607b      	str	r3, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	72fb      	strb	r3, [r7, #11]
 8007408:	4613      	mov	r3, r2
 800740a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	789b      	ldrb	r3, [r3, #2]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d11c      	bne.n	800744e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007414:	7afb      	ldrb	r3, [r7, #11]
 8007416:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800741a:	b2da      	uxtb	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2206      	movs	r2, #6
 8007424:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	893a      	ldrh	r2, [r7, #8]
 800742a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800742c:	893b      	ldrh	r3, [r7, #8]
 800742e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007436:	d104      	bne.n	8007442 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f240 4209 	movw	r2, #1033	; 0x409
 800743e:	829a      	strh	r2, [r3, #20]
 8007440:	e002      	b.n	8007448 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8b3a      	ldrh	r2, [r7, #24]
 800744c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800744e:	8b3b      	ldrh	r3, [r7, #24]
 8007450:	461a      	mov	r2, r3
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fa50 	bl	80078fa <USBH_CtlReq>
 800745a:	4603      	mov	r3, r0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	789b      	ldrb	r3, [r3, #2]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d10f      	bne.n	8007498 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2205      	movs	r2, #5
 8007482:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	b29a      	uxth	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007498:	2200      	movs	r2, #0
 800749a:	2100      	movs	r1, #0
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fa2c 	bl	80078fa <USBH_CtlReq>
 80074a2:	4603      	mov	r3, r0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	789b      	ldrb	r3, [r3, #2]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d10e      	bne.n	80074de <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2209      	movs	r2, #9
 80074ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	887a      	ldrh	r2, [r7, #2]
 80074d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80074de:	2200      	movs	r2, #0
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fa09 	bl	80078fa <USBH_CtlReq>
 80074e8:	4603      	mov	r3, r0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	460b      	mov	r3, r1
 80074fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	789b      	ldrb	r3, [r3, #2]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d10f      	bne.n	8007526 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2203      	movs	r2, #3
 8007510:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	b29a      	uxth	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007526:	2200      	movs	r2, #0
 8007528:	2100      	movs	r1, #0
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f9e5 	bl	80078fa <USBH_CtlReq>
 8007530:	4603      	mov	r3, r0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	789b      	ldrb	r3, [r3, #2]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d10f      	bne.n	800756e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2202      	movs	r2, #2
 8007552:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	b29a      	uxth	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800756e:	2200      	movs	r2, #0
 8007570:	2100      	movs	r1, #0
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f9c1 	bl	80078fa <USBH_CtlReq>
 8007578:	4603      	mov	r3, r0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007582:	b480      	push	{r7}
 8007584:	b085      	sub	sp, #20
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	4613      	mov	r3, r2
 800758e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	781a      	ldrb	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	785a      	ldrb	r2, [r3, #1]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	3302      	adds	r3, #2
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	3303      	adds	r3, #3
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	021b      	lsls	r3, r3, #8
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	4313      	orrs	r3, r2
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	791a      	ldrb	r2, [r3, #4]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	795a      	ldrb	r2, [r3, #5]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	799a      	ldrb	r2, [r3, #6]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	79da      	ldrb	r2, [r3, #7]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80075dc:	88fb      	ldrh	r3, [r7, #6]
 80075de:	2b08      	cmp	r3, #8
 80075e0:	d939      	bls.n	8007656 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	3308      	adds	r3, #8
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	3309      	adds	r3, #9
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	4313      	orrs	r3, r2
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	330a      	adds	r3, #10
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	b29a      	uxth	r2, r3
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	330b      	adds	r3, #11
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	021b      	lsls	r3, r3, #8
 8007610:	b29b      	uxth	r3, r3
 8007612:	4313      	orrs	r3, r2
 8007614:	b29a      	uxth	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	330c      	adds	r3, #12
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	b29a      	uxth	r2, r3
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	330d      	adds	r3, #13
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	021b      	lsls	r3, r3, #8
 800762c:	b29b      	uxth	r3, r3
 800762e:	4313      	orrs	r3, r2
 8007630:	b29a      	uxth	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	7b9a      	ldrb	r2, [r3, #14]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	7bda      	ldrb	r2, [r3, #15]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	7c1a      	ldrb	r2, [r3, #16]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	7c5a      	ldrb	r2, [r3, #17]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	745a      	strb	r2, [r3, #17]
  }
}
 8007656:	bf00      	nop
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b08a      	sub	sp, #40	; 0x28
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	4613      	mov	r3, r2
 800766e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	781a      	ldrb	r2, [r3, #0]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	785a      	ldrb	r2, [r3, #1]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	3302      	adds	r3, #2
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	b29a      	uxth	r2, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	3303      	adds	r3, #3
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	4313      	orrs	r3, r2
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	791a      	ldrb	r2, [r3, #4]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	795a      	ldrb	r2, [r3, #5]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	799a      	ldrb	r2, [r3, #6]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	79da      	ldrb	r2, [r3, #7]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	7a1a      	ldrb	r2, [r3, #8]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80076d8:	88fb      	ldrh	r3, [r7, #6]
 80076da:	2b09      	cmp	r3, #9
 80076dc:	d95f      	bls.n	800779e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80076de:	2309      	movs	r3, #9
 80076e0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80076e6:	e051      	b.n	800778c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80076e8:	f107 0316 	add.w	r3, r7, #22
 80076ec:	4619      	mov	r1, r3
 80076ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076f0:	f000 f8e8 	bl	80078c4 <USBH_GetNextDesc>
 80076f4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	785b      	ldrb	r3, [r3, #1]
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d146      	bne.n	800778c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80076fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007702:	221a      	movs	r2, #26
 8007704:	fb02 f303 	mul.w	r3, r2, r3
 8007708:	3308      	adds	r3, #8
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4413      	add	r3, r2
 800770e:	3302      	adds	r3, #2
 8007710:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007714:	69f8      	ldr	r0, [r7, #28]
 8007716:	f000 f846 	bl	80077a6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007720:	2300      	movs	r3, #0
 8007722:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007724:	e022      	b.n	800776c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007726:	f107 0316 	add.w	r3, r7, #22
 800772a:	4619      	mov	r1, r3
 800772c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800772e:	f000 f8c9 	bl	80078c4 <USBH_GetNextDesc>
 8007732:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	785b      	ldrb	r3, [r3, #1]
 8007738:	2b05      	cmp	r3, #5
 800773a:	d117      	bne.n	800776c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800773c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007740:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007744:	3201      	adds	r2, #1
 8007746:	00d2      	lsls	r2, r2, #3
 8007748:	211a      	movs	r1, #26
 800774a:	fb01 f303 	mul.w	r3, r1, r3
 800774e:	4413      	add	r3, r2
 8007750:	3308      	adds	r3, #8
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	4413      	add	r3, r2
 8007756:	3304      	adds	r3, #4
 8007758:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800775a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800775c:	69b8      	ldr	r0, [r7, #24]
 800775e:	f000 f851 	bl	8007804 <USBH_ParseEPDesc>
            ep_ix++;
 8007762:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007766:	3301      	adds	r3, #1
 8007768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	791b      	ldrb	r3, [r3, #4]
 8007770:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007774:	429a      	cmp	r2, r3
 8007776:	d204      	bcs.n	8007782 <USBH_ParseCfgDesc+0x120>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	885a      	ldrh	r2, [r3, #2]
 800777c:	8afb      	ldrh	r3, [r7, #22]
 800777e:	429a      	cmp	r2, r3
 8007780:	d8d1      	bhi.n	8007726 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007782:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007786:	3301      	adds	r3, #1
 8007788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800778c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007790:	2b01      	cmp	r3, #1
 8007792:	d804      	bhi.n	800779e <USBH_ParseCfgDesc+0x13c>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	885a      	ldrh	r2, [r3, #2]
 8007798:	8afb      	ldrh	r3, [r7, #22]
 800779a:	429a      	cmp	r2, r3
 800779c:	d8a4      	bhi.n	80076e8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800779e:	bf00      	nop
 80077a0:	3728      	adds	r7, #40	; 0x28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	781a      	ldrb	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	785a      	ldrb	r2, [r3, #1]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	789a      	ldrb	r2, [r3, #2]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	78da      	ldrb	r2, [r3, #3]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	791a      	ldrb	r2, [r3, #4]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	795a      	ldrb	r2, [r3, #5]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	799a      	ldrb	r2, [r3, #6]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	79da      	ldrb	r2, [r3, #7]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	7a1a      	ldrb	r2, [r3, #8]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	721a      	strb	r2, [r3, #8]
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781a      	ldrb	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	785a      	ldrb	r2, [r3, #1]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	789a      	ldrb	r2, [r3, #2]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	78da      	ldrb	r2, [r3, #3]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	3304      	adds	r3, #4
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	b29a      	uxth	r2, r3
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	3305      	adds	r3, #5
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	021b      	lsls	r3, r3, #8
 8007840:	b29b      	uxth	r3, r3
 8007842:	4313      	orrs	r3, r2
 8007844:	b29a      	uxth	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	799a      	ldrb	r2, [r3, #6]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	719a      	strb	r2, [r3, #6]
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800785e:	b480      	push	{r7}
 8007860:	b087      	sub	sp, #28
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	4613      	mov	r3, r2
 800786a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3301      	adds	r3, #1
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	2b03      	cmp	r3, #3
 8007874:	d120      	bne.n	80078b8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	1e9a      	subs	r2, r3, #2
 800787c:	88fb      	ldrh	r3, [r7, #6]
 800787e:	4293      	cmp	r3, r2
 8007880:	bf28      	it	cs
 8007882:	4613      	movcs	r3, r2
 8007884:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3302      	adds	r3, #2
 800788a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800788c:	2300      	movs	r3, #0
 800788e:	82fb      	strh	r3, [r7, #22]
 8007890:	e00b      	b.n	80078aa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007892:	8afb      	ldrh	r3, [r7, #22]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4413      	add	r3, r2
 8007898:	781a      	ldrb	r2, [r3, #0]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	3301      	adds	r3, #1
 80078a2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80078a4:	8afb      	ldrh	r3, [r7, #22]
 80078a6:	3302      	adds	r3, #2
 80078a8:	82fb      	strh	r3, [r7, #22]
 80078aa:	8afa      	ldrh	r2, [r7, #22]
 80078ac:	8abb      	ldrh	r3, [r7, #20]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d3ef      	bcc.n	8007892 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2200      	movs	r2, #0
 80078b6:	701a      	strb	r2, [r3, #0]
  }
}
 80078b8:	bf00      	nop
 80078ba:	371c      	adds	r7, #28
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	881a      	ldrh	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	4413      	add	r3, r2
 80078da:	b29a      	uxth	r2, r3
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4413      	add	r3, r2
 80078ea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80078ec:	68fb      	ldr	r3, [r7, #12]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b086      	sub	sp, #24
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	4613      	mov	r3, r2
 8007906:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007908:	2301      	movs	r3, #1
 800790a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	789b      	ldrb	r3, [r3, #2]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d002      	beq.n	800791a <USBH_CtlReq+0x20>
 8007914:	2b02      	cmp	r3, #2
 8007916:	d00f      	beq.n	8007938 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007918:	e027      	b.n	800796a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	88fa      	ldrh	r2, [r7, #6]
 8007924:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2201      	movs	r2, #1
 800792a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2202      	movs	r2, #2
 8007930:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007932:	2301      	movs	r3, #1
 8007934:	75fb      	strb	r3, [r7, #23]
      break;
 8007936:	e018      	b.n	800796a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 f81b 	bl	8007974 <USBH_HandleControl>
 800793e:	4603      	mov	r3, r0
 8007940:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <USBH_CtlReq+0x54>
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	2b03      	cmp	r3, #3
 800794c:	d106      	bne.n	800795c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2201      	movs	r2, #1
 8007952:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	761a      	strb	r2, [r3, #24]
      break;
 800795a:	e005      	b.n	8007968 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800795c:	7dfb      	ldrb	r3, [r7, #23]
 800795e:	2b02      	cmp	r3, #2
 8007960:	d102      	bne.n	8007968 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2201      	movs	r2, #1
 8007966:	709a      	strb	r2, [r3, #2]
      break;
 8007968:	bf00      	nop
  }
  return status;
 800796a:	7dfb      	ldrb	r3, [r7, #23]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af02      	add	r7, sp, #8
 800797a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007980:	2300      	movs	r3, #0
 8007982:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	7e1b      	ldrb	r3, [r3, #24]
 8007988:	3b01      	subs	r3, #1
 800798a:	2b0a      	cmp	r3, #10
 800798c:	f200 8156 	bhi.w	8007c3c <USBH_HandleControl+0x2c8>
 8007990:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <USBH_HandleControl+0x24>)
 8007992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007996:	bf00      	nop
 8007998:	080079c5 	.word	0x080079c5
 800799c:	080079df 	.word	0x080079df
 80079a0:	08007a49 	.word	0x08007a49
 80079a4:	08007a6f 	.word	0x08007a6f
 80079a8:	08007aa7 	.word	0x08007aa7
 80079ac:	08007ad1 	.word	0x08007ad1
 80079b0:	08007b23 	.word	0x08007b23
 80079b4:	08007b45 	.word	0x08007b45
 80079b8:	08007b81 	.word	0x08007b81
 80079bc:	08007ba7 	.word	0x08007ba7
 80079c0:	08007be5 	.word	0x08007be5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f103 0110 	add.w	r1, r3, #16
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	795b      	ldrb	r3, [r3, #5]
 80079ce:	461a      	mov	r2, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f943 	bl	8007c5c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2202      	movs	r2, #2
 80079da:	761a      	strb	r2, [r3, #24]
      break;
 80079dc:	e139      	b.n	8007c52 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	795b      	ldrb	r3, [r3, #5]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fcc5 	bl	8008374 <USBH_LL_GetURBState>
 80079ea:	4603      	mov	r3, r0
 80079ec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d11e      	bne.n	8007a32 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7c1b      	ldrb	r3, [r3, #16]
 80079f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079fc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	8adb      	ldrh	r3, [r3, #22]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007a06:	7b7b      	ldrb	r3, [r7, #13]
 8007a08:	2b80      	cmp	r3, #128	; 0x80
 8007a0a:	d103      	bne.n	8007a14 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2203      	movs	r2, #3
 8007a10:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a12:	e115      	b.n	8007c40 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2205      	movs	r2, #5
 8007a18:	761a      	strb	r2, [r3, #24]
      break;
 8007a1a:	e111      	b.n	8007c40 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007a1c:	7b7b      	ldrb	r3, [r7, #13]
 8007a1e:	2b80      	cmp	r3, #128	; 0x80
 8007a20:	d103      	bne.n	8007a2a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2209      	movs	r2, #9
 8007a26:	761a      	strb	r2, [r3, #24]
      break;
 8007a28:	e10a      	b.n	8007c40 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2207      	movs	r2, #7
 8007a2e:	761a      	strb	r2, [r3, #24]
      break;
 8007a30:	e106      	b.n	8007c40 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d003      	beq.n	8007a40 <USBH_HandleControl+0xcc>
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	f040 8100 	bne.w	8007c40 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	220b      	movs	r2, #11
 8007a44:	761a      	strb	r2, [r3, #24]
      break;
 8007a46:	e0fb      	b.n	8007c40 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6899      	ldr	r1, [r3, #8]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	899a      	ldrh	r2, [r3, #12]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	791b      	ldrb	r3, [r3, #4]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f93a 	bl	8007cda <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2204      	movs	r2, #4
 8007a6a:	761a      	strb	r2, [r3, #24]
      break;
 8007a6c:	e0f1      	b.n	8007c52 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	791b      	ldrb	r3, [r3, #4]
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fc7d 	bl	8008374 <USBH_LL_GetURBState>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d102      	bne.n	8007a8a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2209      	movs	r2, #9
 8007a88:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b05      	cmp	r3, #5
 8007a8e:	d102      	bne.n	8007a96 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007a90:	2303      	movs	r3, #3
 8007a92:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a94:	e0d6      	b.n	8007c44 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	2b04      	cmp	r3, #4
 8007a9a:	f040 80d3 	bne.w	8007c44 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	220b      	movs	r2, #11
 8007aa2:	761a      	strb	r2, [r3, #24]
      break;
 8007aa4:	e0ce      	b.n	8007c44 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6899      	ldr	r1, [r3, #8]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	899a      	ldrh	r2, [r3, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	795b      	ldrb	r3, [r3, #5]
 8007ab2:	2001      	movs	r0, #1
 8007ab4:	9000      	str	r0, [sp, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f8ea 	bl	8007c90 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2206      	movs	r2, #6
 8007acc:	761a      	strb	r2, [r3, #24]
      break;
 8007ace:	e0c0      	b.n	8007c52 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	795b      	ldrb	r3, [r3, #5]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fc4c 	bl	8008374 <USBH_LL_GetURBState>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d103      	bne.n	8007aee <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2207      	movs	r2, #7
 8007aea:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007aec:	e0ac      	b.n	8007c48 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	2b05      	cmp	r3, #5
 8007af2:	d105      	bne.n	8007b00 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	220c      	movs	r2, #12
 8007af8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007afa:	2303      	movs	r3, #3
 8007afc:	73fb      	strb	r3, [r7, #15]
      break;
 8007afe:	e0a3      	b.n	8007c48 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d103      	bne.n	8007b0e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2205      	movs	r2, #5
 8007b0a:	761a      	strb	r2, [r3, #24]
      break;
 8007b0c:	e09c      	b.n	8007c48 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	f040 8099 	bne.w	8007c48 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	220b      	movs	r2, #11
 8007b1a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b20:	e092      	b.n	8007c48 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	791b      	ldrb	r3, [r3, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	2100      	movs	r1, #0
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f8d5 	bl	8007cda <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2208      	movs	r2, #8
 8007b40:	761a      	strb	r2, [r3, #24]

      break;
 8007b42:	e086      	b.n	8007c52 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	791b      	ldrb	r3, [r3, #4]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fc12 	bl	8008374 <USBH_LL_GetURBState>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d105      	bne.n	8007b66 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	220d      	movs	r2, #13
 8007b5e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b64:	e072      	b.n	8007c4c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d103      	bne.n	8007b74 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	220b      	movs	r2, #11
 8007b70:	761a      	strb	r2, [r3, #24]
      break;
 8007b72:	e06b      	b.n	8007c4c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	2b05      	cmp	r3, #5
 8007b78:	d168      	bne.n	8007c4c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b7e:	e065      	b.n	8007c4c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	795b      	ldrb	r3, [r3, #5]
 8007b84:	2201      	movs	r2, #1
 8007b86:	9200      	str	r2, [sp, #0]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f87f 	bl	8007c90 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	220a      	movs	r2, #10
 8007ba2:	761a      	strb	r2, [r3, #24]
      break;
 8007ba4:	e055      	b.n	8007c52 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	795b      	ldrb	r3, [r3, #5]
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fbe1 	bl	8008374 <USBH_LL_GetURBState>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d105      	bne.n	8007bc8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	220d      	movs	r2, #13
 8007bc4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007bc6:	e043      	b.n	8007c50 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d103      	bne.n	8007bd6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2209      	movs	r2, #9
 8007bd2:	761a      	strb	r2, [r3, #24]
      break;
 8007bd4:	e03c      	b.n	8007c50 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	2b04      	cmp	r3, #4
 8007bda:	d139      	bne.n	8007c50 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	220b      	movs	r2, #11
 8007be0:	761a      	strb	r2, [r3, #24]
      break;
 8007be2:	e035      	b.n	8007c50 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	7e5b      	ldrb	r3, [r3, #25]
 8007be8:	3301      	adds	r3, #1
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	765a      	strb	r2, [r3, #25]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7e5b      	ldrb	r3, [r3, #25]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d806      	bhi.n	8007c06 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007c04:	e025      	b.n	8007c52 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c0c:	2106      	movs	r1, #6
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	795b      	ldrb	r3, [r3, #5]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f90c 	bl	8007e3c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	791b      	ldrb	r3, [r3, #4]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f906 	bl	8007e3c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007c36:	2302      	movs	r3, #2
 8007c38:	73fb      	strb	r3, [r7, #15]
      break;
 8007c3a:	e00a      	b.n	8007c52 <USBH_HandleControl+0x2de>

    default:
      break;
 8007c3c:	bf00      	nop
 8007c3e:	e008      	b.n	8007c52 <USBH_HandleControl+0x2de>
      break;
 8007c40:	bf00      	nop
 8007c42:	e006      	b.n	8007c52 <USBH_HandleControl+0x2de>
      break;
 8007c44:	bf00      	nop
 8007c46:	e004      	b.n	8007c52 <USBH_HandleControl+0x2de>
      break;
 8007c48:	bf00      	nop
 8007c4a:	e002      	b.n	8007c52 <USBH_HandleControl+0x2de>
      break;
 8007c4c:	bf00      	nop
 8007c4e:	e000      	b.n	8007c52 <USBH_HandleControl+0x2de>
      break;
 8007c50:	bf00      	nop
  }

  return status;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af04      	add	r7, sp, #16
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	4613      	mov	r3, r2
 8007c68:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c6a:	79f9      	ldrb	r1, [r7, #7]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9303      	str	r3, [sp, #12]
 8007c70:	2308      	movs	r3, #8
 8007c72:	9302      	str	r3, [sp, #8]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	9301      	str	r3, [sp, #4]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2200      	movs	r2, #0
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 fb46 	bl	8008312 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b088      	sub	sp, #32
 8007c94:	af04      	add	r7, sp, #16
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	80fb      	strh	r3, [r7, #6]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007cb4:	7979      	ldrb	r1, [r7, #5]
 8007cb6:	7e3b      	ldrb	r3, [r7, #24]
 8007cb8:	9303      	str	r3, [sp, #12]
 8007cba:	88fb      	ldrh	r3, [r7, #6]
 8007cbc:	9302      	str	r3, [sp, #8]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	2200      	movs	r2, #0
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 fb21 	bl	8008312 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b088      	sub	sp, #32
 8007cde:	af04      	add	r7, sp, #16
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	460b      	mov	r3, r1
 8007cea:	80fb      	strh	r3, [r7, #6]
 8007cec:	4613      	mov	r3, r2
 8007cee:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007cf0:	7979      	ldrb	r1, [r7, #5]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	9303      	str	r3, [sp, #12]
 8007cf6:	88fb      	ldrh	r3, [r7, #6]
 8007cf8:	9302      	str	r3, [sp, #8]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	2301      	movs	r3, #1
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	2300      	movs	r3, #0
 8007d04:	2201      	movs	r2, #1
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 fb03 	bl	8008312 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007d0c:	2300      	movs	r3, #0

}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b088      	sub	sp, #32
 8007d1a:	af04      	add	r7, sp, #16
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	4611      	mov	r1, r2
 8007d22:	461a      	mov	r2, r3
 8007d24:	460b      	mov	r3, r1
 8007d26:	80fb      	strh	r3, [r7, #6]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007d36:	2300      	movs	r3, #0
 8007d38:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d3a:	7979      	ldrb	r1, [r7, #5]
 8007d3c:	7e3b      	ldrb	r3, [r7, #24]
 8007d3e:	9303      	str	r3, [sp, #12]
 8007d40:	88fb      	ldrh	r3, [r7, #6]
 8007d42:	9302      	str	r3, [sp, #8]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	2301      	movs	r3, #1
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	2200      	movs	r2, #0
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 fade 	bl	8008312 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af04      	add	r7, sp, #16
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	460b      	mov	r3, r1
 8007d70:	80fb      	strh	r3, [r7, #6]
 8007d72:	4613      	mov	r3, r2
 8007d74:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d76:	7979      	ldrb	r1, [r7, #5]
 8007d78:	2300      	movs	r3, #0
 8007d7a:	9303      	str	r3, [sp, #12]
 8007d7c:	88fb      	ldrh	r3, [r7, #6]
 8007d7e:	9302      	str	r3, [sp, #8]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	2301      	movs	r3, #1
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	2302      	movs	r3, #2
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 fac0 	bl	8008312 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af04      	add	r7, sp, #16
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	4608      	mov	r0, r1
 8007da6:	4611      	mov	r1, r2
 8007da8:	461a      	mov	r2, r3
 8007daa:	4603      	mov	r3, r0
 8007dac:	70fb      	strb	r3, [r7, #3]
 8007dae:	460b      	mov	r3, r1
 8007db0:	70bb      	strb	r3, [r7, #2]
 8007db2:	4613      	mov	r3, r2
 8007db4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007db6:	7878      	ldrb	r0, [r7, #1]
 8007db8:	78ba      	ldrb	r2, [r7, #2]
 8007dba:	78f9      	ldrb	r1, [r7, #3]
 8007dbc:	8b3b      	ldrh	r3, [r7, #24]
 8007dbe:	9302      	str	r3, [sp, #8]
 8007dc0:	7d3b      	ldrb	r3, [r7, #20]
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	7c3b      	ldrb	r3, [r7, #16]
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	4603      	mov	r3, r0
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fa53 	bl	8008276 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	460b      	mov	r3, r1
 8007de4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007de6:	78fb      	ldrb	r3, [r7, #3]
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa72 	bl	80082d4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	460b      	mov	r3, r1
 8007e04:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f836 	bl	8007e78 <USBH_GetFreePipe>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007e10:	89fb      	ldrh	r3, [r7, #14]
 8007e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00a      	beq.n	8007e30 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007e1a:	78fa      	ldrb	r2, [r7, #3]
 8007e1c:	89fb      	ldrh	r3, [r7, #14]
 8007e1e:	f003 030f 	and.w	r3, r3, #15
 8007e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	33e0      	adds	r3, #224	; 0xe0
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007e30:	89fb      	ldrh	r3, [r7, #14]
 8007e32:	b2db      	uxtb	r3, r3
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007e48:	78fb      	ldrb	r3, [r7, #3]
 8007e4a:	2b0a      	cmp	r3, #10
 8007e4c:	d80d      	bhi.n	8007e6a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	33e0      	adds	r3, #224	; 0xe0
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	78fb      	ldrb	r3, [r7, #3]
 8007e5c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	33e0      	adds	r3, #224	; 0xe0
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	440b      	add	r3, r1
 8007e68:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007e84:	2300      	movs	r3, #0
 8007e86:	73fb      	strb	r3, [r7, #15]
 8007e88:	e00f      	b.n	8007eaa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	33e0      	adds	r3, #224	; 0xe0
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d102      	bne.n	8007ea4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	e007      	b.n	8007eb4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	73fb      	strb	r3, [r7, #15]
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	2b0a      	cmp	r3, #10
 8007eae:	d9ec      	bls.n	8007e8a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	490e      	ldr	r1, [pc, #56]	; (8007f00 <MX_USB_HOST_Init+0x40>)
 8007ec8:	480e      	ldr	r0, [pc, #56]	; (8007f04 <MX_USB_HOST_Init+0x44>)
 8007eca:	f7fe fca1 	bl	8006810 <USBH_Init>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007ed4:	f7f9 fac6 	bl	8001464 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007ed8:	490b      	ldr	r1, [pc, #44]	; (8007f08 <MX_USB_HOST_Init+0x48>)
 8007eda:	480a      	ldr	r0, [pc, #40]	; (8007f04 <MX_USB_HOST_Init+0x44>)
 8007edc:	f7fe fd26 	bl	800692c <USBH_RegisterClass>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007ee6:	f7f9 fabd 	bl	8001464 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007eea:	4806      	ldr	r0, [pc, #24]	; (8007f04 <MX_USB_HOST_Init+0x44>)
 8007eec:	f7fe fdaa 	bl	8006a44 <USBH_Start>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007ef6:	f7f9 fab5 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007efa:	bf00      	nop
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	08007f21 	.word	0x08007f21
 8007f04:	20000190 	.word	0x20000190
 8007f08:	2000000c 	.word	0x2000000c

08007f0c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007f10:	4802      	ldr	r0, [pc, #8]	; (8007f1c <MX_USB_HOST_Process+0x10>)
 8007f12:	f7fe fda7 	bl	8006a64 <USBH_Process>
}
 8007f16:	bf00      	nop
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20000190 	.word	0x20000190

08007f20 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007f2c:	78fb      	ldrb	r3, [r7, #3]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d819      	bhi.n	8007f68 <USBH_UserProcess+0x48>
 8007f34:	a201      	add	r2, pc, #4	; (adr r2, 8007f3c <USBH_UserProcess+0x1c>)
 8007f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3a:	bf00      	nop
 8007f3c:	08007f69 	.word	0x08007f69
 8007f40:	08007f59 	.word	0x08007f59
 8007f44:	08007f69 	.word	0x08007f69
 8007f48:	08007f61 	.word	0x08007f61
 8007f4c:	08007f51 	.word	0x08007f51
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007f50:	4b09      	ldr	r3, [pc, #36]	; (8007f78 <USBH_UserProcess+0x58>)
 8007f52:	2203      	movs	r2, #3
 8007f54:	701a      	strb	r2, [r3, #0]
  break;
 8007f56:	e008      	b.n	8007f6a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007f58:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <USBH_UserProcess+0x58>)
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	701a      	strb	r2, [r3, #0]
  break;
 8007f5e:	e004      	b.n	8007f6a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007f60:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <USBH_UserProcess+0x58>)
 8007f62:	2201      	movs	r2, #1
 8007f64:	701a      	strb	r2, [r3, #0]
  break;
 8007f66:	e000      	b.n	8007f6a <USBH_UserProcess+0x4a>

  default:
  break;
 8007f68:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007f6a:	bf00      	nop
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	20000180 	.word	0x20000180

08007f7c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08a      	sub	sp, #40	; 0x28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f84:	f107 0314 	add.w	r3, r7, #20
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	605a      	str	r2, [r3, #4]
 8007f8e:	609a      	str	r2, [r3, #8]
 8007f90:	60da      	str	r2, [r3, #12]
 8007f92:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f9c:	d147      	bne.n	800802e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	613b      	str	r3, [r7, #16]
 8007fa2:	4b25      	ldr	r3, [pc, #148]	; (8008038 <HAL_HCD_MspInit+0xbc>)
 8007fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa6:	4a24      	ldr	r2, [pc, #144]	; (8008038 <HAL_HCD_MspInit+0xbc>)
 8007fa8:	f043 0301 	orr.w	r3, r3, #1
 8007fac:	6313      	str	r3, [r2, #48]	; 0x30
 8007fae:	4b22      	ldr	r3, [pc, #136]	; (8008038 <HAL_HCD_MspInit+0xbc>)
 8007fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007fc8:	f107 0314 	add.w	r3, r7, #20
 8007fcc:	4619      	mov	r1, r3
 8007fce:	481b      	ldr	r0, [pc, #108]	; (800803c <HAL_HCD_MspInit+0xc0>)
 8007fd0:	f7f9 fd54 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007fd4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fda:	2302      	movs	r3, #2
 8007fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007fe6:	230a      	movs	r3, #10
 8007fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fea:	f107 0314 	add.w	r3, r7, #20
 8007fee:	4619      	mov	r1, r3
 8007ff0:	4812      	ldr	r0, [pc, #72]	; (800803c <HAL_HCD_MspInit+0xc0>)
 8007ff2:	f7f9 fd43 	bl	8001a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ff6:	4b10      	ldr	r3, [pc, #64]	; (8008038 <HAL_HCD_MspInit+0xbc>)
 8007ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffa:	4a0f      	ldr	r2, [pc, #60]	; (8008038 <HAL_HCD_MspInit+0xbc>)
 8007ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008000:	6353      	str	r3, [r2, #52]	; 0x34
 8008002:	2300      	movs	r3, #0
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <HAL_HCD_MspInit+0xbc>)
 8008008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800a:	4a0b      	ldr	r2, [pc, #44]	; (8008038 <HAL_HCD_MspInit+0xbc>)
 800800c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008010:	6453      	str	r3, [r2, #68]	; 0x44
 8008012:	4b09      	ldr	r3, [pc, #36]	; (8008038 <HAL_HCD_MspInit+0xbc>)
 8008014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800801e:	2200      	movs	r2, #0
 8008020:	2100      	movs	r1, #0
 8008022:	2043      	movs	r0, #67	; 0x43
 8008024:	f7f9 fcf3 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008028:	2043      	movs	r0, #67	; 0x43
 800802a:	f7f9 fd0c 	bl	8001a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800802e:	bf00      	nop
 8008030:	3728      	adds	r7, #40	; 0x28
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	40023800 	.word	0x40023800
 800803c:	40020000 	.word	0x40020000

08008040 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800804e:	4618      	mov	r0, r3
 8008050:	f7ff f8db 	bl	800720a <USBH_LL_IncTimer>
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800806a:	4618      	mov	r0, r3
 800806c:	f7ff f913 	bl	8007296 <USBH_LL_Connect>
}
 8008070:	bf00      	nop
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff f91c 	bl	80072c4 <USBH_LL_Disconnect>
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	70fb      	strb	r3, [r7, #3]
 80080a0:	4613      	mov	r3, r2
 80080a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff f8cd 	bl	800725e <USBH_LL_PortEnabled>
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080da:	4618      	mov	r0, r3
 80080dc:	f7ff f8cd 	bl	800727a <USBH_LL_PortDisabled>
}
 80080e0:	bf00      	nop
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d12a      	bne.n	8008150 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80080fa:	4a18      	ldr	r2, [pc, #96]	; (800815c <USBH_LL_Init+0x74>)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a15      	ldr	r2, [pc, #84]	; (800815c <USBH_LL_Init+0x74>)
 8008106:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800810a:	4b14      	ldr	r3, [pc, #80]	; (800815c <USBH_LL_Init+0x74>)
 800810c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008110:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008112:	4b12      	ldr	r3, [pc, #72]	; (800815c <USBH_LL_Init+0x74>)
 8008114:	2208      	movs	r2, #8
 8008116:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008118:	4b10      	ldr	r3, [pc, #64]	; (800815c <USBH_LL_Init+0x74>)
 800811a:	2201      	movs	r2, #1
 800811c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800811e:	4b0f      	ldr	r3, [pc, #60]	; (800815c <USBH_LL_Init+0x74>)
 8008120:	2200      	movs	r2, #0
 8008122:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008124:	4b0d      	ldr	r3, [pc, #52]	; (800815c <USBH_LL_Init+0x74>)
 8008126:	2202      	movs	r2, #2
 8008128:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800812a:	4b0c      	ldr	r3, [pc, #48]	; (800815c <USBH_LL_Init+0x74>)
 800812c:	2200      	movs	r2, #0
 800812e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008130:	480a      	ldr	r0, [pc, #40]	; (800815c <USBH_LL_Init+0x74>)
 8008132:	f7f9 fe58 	bl	8001de6 <HAL_HCD_Init>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800813c:	f7f9 f992 	bl	8001464 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008140:	4806      	ldr	r0, [pc, #24]	; (800815c <USBH_LL_Init+0x74>)
 8008142:	f7fa fa35 	bl	80025b0 <HAL_HCD_GetCurrentFrame>
 8008146:	4603      	mov	r3, r0
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7ff f84e 	bl	80071ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20000568 	.word	0x20000568

08008160 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008176:	4618      	mov	r0, r3
 8008178:	f7fa f9a4 	bl	80024c4 <HAL_HCD_Start>
 800817c:	4603      	mov	r3, r0
 800817e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	4618      	mov	r0, r3
 8008184:	f000 f95c 	bl	8008440 <USBH_Get_USB_Status>
 8008188:	4603      	mov	r3, r0
 800818a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800818c:	7bbb      	ldrb	r3, [r7, #14]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fa f9ac 	bl	800250a <HAL_HCD_Stop>
 80081b2:	4603      	mov	r3, r0
 80081b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 f941 	bl	8008440 <USBH_Get_USB_Status>
 80081be:	4603      	mov	r3, r0
 80081c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80081d4:	2301      	movs	r3, #1
 80081d6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fa f9f4 	bl	80025cc <HAL_HCD_GetCurrentSpeed>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d00c      	beq.n	8008204 <USBH_LL_GetSpeed+0x38>
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d80d      	bhi.n	800820a <USBH_LL_GetSpeed+0x3e>
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <USBH_LL_GetSpeed+0x2c>
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d003      	beq.n	80081fe <USBH_LL_GetSpeed+0x32>
 80081f6:	e008      	b.n	800820a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73fb      	strb	r3, [r7, #15]
    break;
 80081fc:	e008      	b.n	8008210 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80081fe:	2301      	movs	r3, #1
 8008200:	73fb      	strb	r3, [r7, #15]
    break;
 8008202:	e005      	b.n	8008210 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008204:	2302      	movs	r3, #2
 8008206:	73fb      	strb	r3, [r7, #15]
    break;
 8008208:	e002      	b.n	8008210 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800820a:	2301      	movs	r3, #1
 800820c:	73fb      	strb	r3, [r7, #15]
    break;
 800820e:	bf00      	nop
  }
  return  speed;
 8008210:	7bfb      	ldrb	r3, [r7, #15]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008230:	4618      	mov	r0, r3
 8008232:	f7fa f987 	bl	8002544 <HAL_HCD_ResetPort>
 8008236:	4603      	mov	r3, r0
 8008238:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	4618      	mov	r0, r3
 800823e:	f000 f8ff 	bl	8008440 <USBH_Get_USB_Status>
 8008242:	4603      	mov	r3, r0
 8008244:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008246:	7bbb      	ldrb	r3, [r7, #14]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	4611      	mov	r1, r2
 8008266:	4618      	mov	r0, r3
 8008268:	f7fa f98e 	bl	8002588 <HAL_HCD_HC_GetXferCount>
 800826c:	4603      	mov	r3, r0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008276:	b590      	push	{r4, r7, lr}
 8008278:	b089      	sub	sp, #36	; 0x24
 800827a:	af04      	add	r7, sp, #16
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	4608      	mov	r0, r1
 8008280:	4611      	mov	r1, r2
 8008282:	461a      	mov	r2, r3
 8008284:	4603      	mov	r3, r0
 8008286:	70fb      	strb	r3, [r7, #3]
 8008288:	460b      	mov	r3, r1
 800828a:	70bb      	strb	r3, [r7, #2]
 800828c:	4613      	mov	r3, r2
 800828e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800829e:	787c      	ldrb	r4, [r7, #1]
 80082a0:	78ba      	ldrb	r2, [r7, #2]
 80082a2:	78f9      	ldrb	r1, [r7, #3]
 80082a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082a6:	9302      	str	r3, [sp, #8]
 80082a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	4623      	mov	r3, r4
 80082b6:	f7f9 fdf8 	bl	8001eaa <HAL_HCD_HC_Init>
 80082ba:	4603      	mov	r3, r0
 80082bc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80082be:	7bfb      	ldrb	r3, [r7, #15]
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 f8bd 	bl	8008440 <USBH_Get_USB_Status>
 80082c6:	4603      	mov	r3, r0
 80082c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd90      	pop	{r4, r7, pc}

080082d4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082ee:	78fa      	ldrb	r2, [r7, #3]
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7f9 fe68 	bl	8001fc8 <HAL_HCD_HC_Halt>
 80082f8:	4603      	mov	r3, r0
 80082fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 f89e 	bl	8008440 <USBH_Get_USB_Status>
 8008304:	4603      	mov	r3, r0
 8008306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008308:	7bbb      	ldrb	r3, [r7, #14]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008312:	b590      	push	{r4, r7, lr}
 8008314:	b089      	sub	sp, #36	; 0x24
 8008316:	af04      	add	r7, sp, #16
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	4608      	mov	r0, r1
 800831c:	4611      	mov	r1, r2
 800831e:	461a      	mov	r2, r3
 8008320:	4603      	mov	r3, r0
 8008322:	70fb      	strb	r3, [r7, #3]
 8008324:	460b      	mov	r3, r1
 8008326:	70bb      	strb	r3, [r7, #2]
 8008328:	4613      	mov	r3, r2
 800832a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800833a:	787c      	ldrb	r4, [r7, #1]
 800833c:	78ba      	ldrb	r2, [r7, #2]
 800833e:	78f9      	ldrb	r1, [r7, #3]
 8008340:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008344:	9303      	str	r3, [sp, #12]
 8008346:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008348:	9302      	str	r3, [sp, #8]
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	4623      	mov	r3, r4
 8008356:	f7f9 fe5b 	bl	8002010 <HAL_HCD_HC_SubmitRequest>
 800835a:	4603      	mov	r3, r0
 800835c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800835e:	7bfb      	ldrb	r3, [r7, #15]
 8008360:	4618      	mov	r0, r3
 8008362:	f000 f86d 	bl	8008440 <USBH_Get_USB_Status>
 8008366:	4603      	mov	r3, r0
 8008368:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800836a:	7bbb      	ldrb	r3, [r7, #14]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	bd90      	pop	{r4, r7, pc}

08008374 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008386:	78fa      	ldrb	r2, [r7, #3]
 8008388:	4611      	mov	r1, r2
 800838a:	4618      	mov	r0, r3
 800838c:	f7fa f8e8 	bl	8002560 <HAL_HCD_HC_GetURBState>
 8008390:	4603      	mov	r3, r0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	460b      	mov	r3, r1
 80083a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d103      	bne.n	80083b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80083b0:	78fb      	ldrb	r3, [r7, #3]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 f870 	bl	8008498 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80083b8:	20c8      	movs	r0, #200	; 0xc8
 80083ba:	f7f9 fa29 	bl	8001810 <HAL_Delay>
  return USBH_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
 80083d4:	4613      	mov	r3, r2
 80083d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	212c      	movs	r1, #44	; 0x2c
 80083e6:	fb01 f303 	mul.w	r3, r1, r3
 80083ea:	4413      	add	r3, r2
 80083ec:	333b      	adds	r3, #59	; 0x3b
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d009      	beq.n	8008408 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80083f4:	78fb      	ldrb	r3, [r7, #3]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	212c      	movs	r1, #44	; 0x2c
 80083fa:	fb01 f303 	mul.w	r3, r1, r3
 80083fe:	4413      	add	r3, r2
 8008400:	3354      	adds	r3, #84	; 0x54
 8008402:	78ba      	ldrb	r2, [r7, #2]
 8008404:	701a      	strb	r2, [r3, #0]
 8008406:	e008      	b.n	800841a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008408:	78fb      	ldrb	r3, [r7, #3]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	212c      	movs	r1, #44	; 0x2c
 800840e:	fb01 f303 	mul.w	r3, r1, r3
 8008412:	4413      	add	r3, r2
 8008414:	3355      	adds	r3, #85	; 0x55
 8008416:	78ba      	ldrb	r2, [r7, #2]
 8008418:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7f9 f9ed 	bl	8001810 <HAL_Delay>
}
 8008436:	bf00      	nop
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800844e:	79fb      	ldrb	r3, [r7, #7]
 8008450:	2b03      	cmp	r3, #3
 8008452:	d817      	bhi.n	8008484 <USBH_Get_USB_Status+0x44>
 8008454:	a201      	add	r2, pc, #4	; (adr r2, 800845c <USBH_Get_USB_Status+0x1c>)
 8008456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845a:	bf00      	nop
 800845c:	0800846d 	.word	0x0800846d
 8008460:	08008473 	.word	0x08008473
 8008464:	08008479 	.word	0x08008479
 8008468:	0800847f 	.word	0x0800847f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	73fb      	strb	r3, [r7, #15]
    break;
 8008470:	e00b      	b.n	800848a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008472:	2302      	movs	r3, #2
 8008474:	73fb      	strb	r3, [r7, #15]
    break;
 8008476:	e008      	b.n	800848a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008478:	2301      	movs	r3, #1
 800847a:	73fb      	strb	r3, [r7, #15]
    break;
 800847c:	e005      	b.n	800848a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800847e:	2302      	movs	r3, #2
 8008480:	73fb      	strb	r3, [r7, #15]
    break;
 8008482:	e002      	b.n	800848a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008484:	2302      	movs	r3, #2
 8008486:	73fb      	strb	r3, [r7, #15]
    break;
 8008488:	bf00      	nop
  }
  return usb_status;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80084a2:	79fb      	ldrb	r3, [r7, #7]
 80084a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d102      	bne.n	80084b2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80084ac:	2301      	movs	r3, #1
 80084ae:	73fb      	strb	r3, [r7, #15]
 80084b0:	e001      	b.n	80084b6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	461a      	mov	r2, r3
 80084ba:	2101      	movs	r1, #1
 80084bc:	4803      	ldr	r0, [pc, #12]	; (80084cc <MX_DriverVbusFS+0x34>)
 80084be:	f7f9 fc79 	bl	8001db4 <HAL_GPIO_WritePin>
}
 80084c2:	bf00      	nop
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	40020800 	.word	0x40020800

080084d0 <__errno>:
 80084d0:	4b01      	ldr	r3, [pc, #4]	; (80084d8 <__errno+0x8>)
 80084d2:	6818      	ldr	r0, [r3, #0]
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	2000002c 	.word	0x2000002c

080084dc <__libc_init_array>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	4d0d      	ldr	r5, [pc, #52]	; (8008514 <__libc_init_array+0x38>)
 80084e0:	4c0d      	ldr	r4, [pc, #52]	; (8008518 <__libc_init_array+0x3c>)
 80084e2:	1b64      	subs	r4, r4, r5
 80084e4:	10a4      	asrs	r4, r4, #2
 80084e6:	2600      	movs	r6, #0
 80084e8:	42a6      	cmp	r6, r4
 80084ea:	d109      	bne.n	8008500 <__libc_init_array+0x24>
 80084ec:	4d0b      	ldr	r5, [pc, #44]	; (800851c <__libc_init_array+0x40>)
 80084ee:	4c0c      	ldr	r4, [pc, #48]	; (8008520 <__libc_init_array+0x44>)
 80084f0:	f000 f8f8 	bl	80086e4 <_init>
 80084f4:	1b64      	subs	r4, r4, r5
 80084f6:	10a4      	asrs	r4, r4, #2
 80084f8:	2600      	movs	r6, #0
 80084fa:	42a6      	cmp	r6, r4
 80084fc:	d105      	bne.n	800850a <__libc_init_array+0x2e>
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	f855 3b04 	ldr.w	r3, [r5], #4
 8008504:	4798      	blx	r3
 8008506:	3601      	adds	r6, #1
 8008508:	e7ee      	b.n	80084e8 <__libc_init_array+0xc>
 800850a:	f855 3b04 	ldr.w	r3, [r5], #4
 800850e:	4798      	blx	r3
 8008510:	3601      	adds	r6, #1
 8008512:	e7f2      	b.n	80084fa <__libc_init_array+0x1e>
 8008514:	08008720 	.word	0x08008720
 8008518:	08008720 	.word	0x08008720
 800851c:	08008720 	.word	0x08008720
 8008520:	08008724 	.word	0x08008724

08008524 <malloc>:
 8008524:	4b02      	ldr	r3, [pc, #8]	; (8008530 <malloc+0xc>)
 8008526:	4601      	mov	r1, r0
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	f000 b863 	b.w	80085f4 <_malloc_r>
 800852e:	bf00      	nop
 8008530:	2000002c 	.word	0x2000002c

08008534 <free>:
 8008534:	4b02      	ldr	r3, [pc, #8]	; (8008540 <free+0xc>)
 8008536:	4601      	mov	r1, r0
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	f000 b80b 	b.w	8008554 <_free_r>
 800853e:	bf00      	nop
 8008540:	2000002c 	.word	0x2000002c

08008544 <memset>:
 8008544:	4402      	add	r2, r0
 8008546:	4603      	mov	r3, r0
 8008548:	4293      	cmp	r3, r2
 800854a:	d100      	bne.n	800854e <memset+0xa>
 800854c:	4770      	bx	lr
 800854e:	f803 1b01 	strb.w	r1, [r3], #1
 8008552:	e7f9      	b.n	8008548 <memset+0x4>

08008554 <_free_r>:
 8008554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008556:	2900      	cmp	r1, #0
 8008558:	d048      	beq.n	80085ec <_free_r+0x98>
 800855a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800855e:	9001      	str	r0, [sp, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	f1a1 0404 	sub.w	r4, r1, #4
 8008566:	bfb8      	it	lt
 8008568:	18e4      	addlt	r4, r4, r3
 800856a:	f000 f8ad 	bl	80086c8 <__malloc_lock>
 800856e:	4a20      	ldr	r2, [pc, #128]	; (80085f0 <_free_r+0x9c>)
 8008570:	9801      	ldr	r0, [sp, #4]
 8008572:	6813      	ldr	r3, [r2, #0]
 8008574:	4615      	mov	r5, r2
 8008576:	b933      	cbnz	r3, 8008586 <_free_r+0x32>
 8008578:	6063      	str	r3, [r4, #4]
 800857a:	6014      	str	r4, [r2, #0]
 800857c:	b003      	add	sp, #12
 800857e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008582:	f000 b8a7 	b.w	80086d4 <__malloc_unlock>
 8008586:	42a3      	cmp	r3, r4
 8008588:	d90b      	bls.n	80085a2 <_free_r+0x4e>
 800858a:	6821      	ldr	r1, [r4, #0]
 800858c:	1862      	adds	r2, r4, r1
 800858e:	4293      	cmp	r3, r2
 8008590:	bf04      	itt	eq
 8008592:	681a      	ldreq	r2, [r3, #0]
 8008594:	685b      	ldreq	r3, [r3, #4]
 8008596:	6063      	str	r3, [r4, #4]
 8008598:	bf04      	itt	eq
 800859a:	1852      	addeq	r2, r2, r1
 800859c:	6022      	streq	r2, [r4, #0]
 800859e:	602c      	str	r4, [r5, #0]
 80085a0:	e7ec      	b.n	800857c <_free_r+0x28>
 80085a2:	461a      	mov	r2, r3
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	b10b      	cbz	r3, 80085ac <_free_r+0x58>
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	d9fa      	bls.n	80085a2 <_free_r+0x4e>
 80085ac:	6811      	ldr	r1, [r2, #0]
 80085ae:	1855      	adds	r5, r2, r1
 80085b0:	42a5      	cmp	r5, r4
 80085b2:	d10b      	bne.n	80085cc <_free_r+0x78>
 80085b4:	6824      	ldr	r4, [r4, #0]
 80085b6:	4421      	add	r1, r4
 80085b8:	1854      	adds	r4, r2, r1
 80085ba:	42a3      	cmp	r3, r4
 80085bc:	6011      	str	r1, [r2, #0]
 80085be:	d1dd      	bne.n	800857c <_free_r+0x28>
 80085c0:	681c      	ldr	r4, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	6053      	str	r3, [r2, #4]
 80085c6:	4421      	add	r1, r4
 80085c8:	6011      	str	r1, [r2, #0]
 80085ca:	e7d7      	b.n	800857c <_free_r+0x28>
 80085cc:	d902      	bls.n	80085d4 <_free_r+0x80>
 80085ce:	230c      	movs	r3, #12
 80085d0:	6003      	str	r3, [r0, #0]
 80085d2:	e7d3      	b.n	800857c <_free_r+0x28>
 80085d4:	6825      	ldr	r5, [r4, #0]
 80085d6:	1961      	adds	r1, r4, r5
 80085d8:	428b      	cmp	r3, r1
 80085da:	bf04      	itt	eq
 80085dc:	6819      	ldreq	r1, [r3, #0]
 80085de:	685b      	ldreq	r3, [r3, #4]
 80085e0:	6063      	str	r3, [r4, #4]
 80085e2:	bf04      	itt	eq
 80085e4:	1949      	addeq	r1, r1, r5
 80085e6:	6021      	streq	r1, [r4, #0]
 80085e8:	6054      	str	r4, [r2, #4]
 80085ea:	e7c7      	b.n	800857c <_free_r+0x28>
 80085ec:	b003      	add	sp, #12
 80085ee:	bd30      	pop	{r4, r5, pc}
 80085f0:	20000184 	.word	0x20000184

080085f4 <_malloc_r>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	1ccd      	adds	r5, r1, #3
 80085f8:	f025 0503 	bic.w	r5, r5, #3
 80085fc:	3508      	adds	r5, #8
 80085fe:	2d0c      	cmp	r5, #12
 8008600:	bf38      	it	cc
 8008602:	250c      	movcc	r5, #12
 8008604:	2d00      	cmp	r5, #0
 8008606:	4606      	mov	r6, r0
 8008608:	db01      	blt.n	800860e <_malloc_r+0x1a>
 800860a:	42a9      	cmp	r1, r5
 800860c:	d903      	bls.n	8008616 <_malloc_r+0x22>
 800860e:	230c      	movs	r3, #12
 8008610:	6033      	str	r3, [r6, #0]
 8008612:	2000      	movs	r0, #0
 8008614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008616:	f000 f857 	bl	80086c8 <__malloc_lock>
 800861a:	4921      	ldr	r1, [pc, #132]	; (80086a0 <_malloc_r+0xac>)
 800861c:	680a      	ldr	r2, [r1, #0]
 800861e:	4614      	mov	r4, r2
 8008620:	b99c      	cbnz	r4, 800864a <_malloc_r+0x56>
 8008622:	4f20      	ldr	r7, [pc, #128]	; (80086a4 <_malloc_r+0xb0>)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	b923      	cbnz	r3, 8008632 <_malloc_r+0x3e>
 8008628:	4621      	mov	r1, r4
 800862a:	4630      	mov	r0, r6
 800862c:	f000 f83c 	bl	80086a8 <_sbrk_r>
 8008630:	6038      	str	r0, [r7, #0]
 8008632:	4629      	mov	r1, r5
 8008634:	4630      	mov	r0, r6
 8008636:	f000 f837 	bl	80086a8 <_sbrk_r>
 800863a:	1c43      	adds	r3, r0, #1
 800863c:	d123      	bne.n	8008686 <_malloc_r+0x92>
 800863e:	230c      	movs	r3, #12
 8008640:	6033      	str	r3, [r6, #0]
 8008642:	4630      	mov	r0, r6
 8008644:	f000 f846 	bl	80086d4 <__malloc_unlock>
 8008648:	e7e3      	b.n	8008612 <_malloc_r+0x1e>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	1b5b      	subs	r3, r3, r5
 800864e:	d417      	bmi.n	8008680 <_malloc_r+0x8c>
 8008650:	2b0b      	cmp	r3, #11
 8008652:	d903      	bls.n	800865c <_malloc_r+0x68>
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	441c      	add	r4, r3
 8008658:	6025      	str	r5, [r4, #0]
 800865a:	e004      	b.n	8008666 <_malloc_r+0x72>
 800865c:	6863      	ldr	r3, [r4, #4]
 800865e:	42a2      	cmp	r2, r4
 8008660:	bf0c      	ite	eq
 8008662:	600b      	streq	r3, [r1, #0]
 8008664:	6053      	strne	r3, [r2, #4]
 8008666:	4630      	mov	r0, r6
 8008668:	f000 f834 	bl	80086d4 <__malloc_unlock>
 800866c:	f104 000b 	add.w	r0, r4, #11
 8008670:	1d23      	adds	r3, r4, #4
 8008672:	f020 0007 	bic.w	r0, r0, #7
 8008676:	1ac2      	subs	r2, r0, r3
 8008678:	d0cc      	beq.n	8008614 <_malloc_r+0x20>
 800867a:	1a1b      	subs	r3, r3, r0
 800867c:	50a3      	str	r3, [r4, r2]
 800867e:	e7c9      	b.n	8008614 <_malloc_r+0x20>
 8008680:	4622      	mov	r2, r4
 8008682:	6864      	ldr	r4, [r4, #4]
 8008684:	e7cc      	b.n	8008620 <_malloc_r+0x2c>
 8008686:	1cc4      	adds	r4, r0, #3
 8008688:	f024 0403 	bic.w	r4, r4, #3
 800868c:	42a0      	cmp	r0, r4
 800868e:	d0e3      	beq.n	8008658 <_malloc_r+0x64>
 8008690:	1a21      	subs	r1, r4, r0
 8008692:	4630      	mov	r0, r6
 8008694:	f000 f808 	bl	80086a8 <_sbrk_r>
 8008698:	3001      	adds	r0, #1
 800869a:	d1dd      	bne.n	8008658 <_malloc_r+0x64>
 800869c:	e7cf      	b.n	800863e <_malloc_r+0x4a>
 800869e:	bf00      	nop
 80086a0:	20000184 	.word	0x20000184
 80086a4:	20000188 	.word	0x20000188

080086a8 <_sbrk_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4d06      	ldr	r5, [pc, #24]	; (80086c4 <_sbrk_r+0x1c>)
 80086ac:	2300      	movs	r3, #0
 80086ae:	4604      	mov	r4, r0
 80086b0:	4608      	mov	r0, r1
 80086b2:	602b      	str	r3, [r5, #0]
 80086b4:	f7f8 ffc8 	bl	8001648 <_sbrk>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d102      	bne.n	80086c2 <_sbrk_r+0x1a>
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	b103      	cbz	r3, 80086c2 <_sbrk_r+0x1a>
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	2000086c 	.word	0x2000086c

080086c8 <__malloc_lock>:
 80086c8:	4801      	ldr	r0, [pc, #4]	; (80086d0 <__malloc_lock+0x8>)
 80086ca:	f000 b809 	b.w	80086e0 <__retarget_lock_acquire_recursive>
 80086ce:	bf00      	nop
 80086d0:	20000874 	.word	0x20000874

080086d4 <__malloc_unlock>:
 80086d4:	4801      	ldr	r0, [pc, #4]	; (80086dc <__malloc_unlock+0x8>)
 80086d6:	f000 b804 	b.w	80086e2 <__retarget_lock_release_recursive>
 80086da:	bf00      	nop
 80086dc:	20000874 	.word	0x20000874

080086e0 <__retarget_lock_acquire_recursive>:
 80086e0:	4770      	bx	lr

080086e2 <__retarget_lock_release_recursive>:
 80086e2:	4770      	bx	lr

080086e4 <_init>:
 80086e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e6:	bf00      	nop
 80086e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ea:	bc08      	pop	{r3}
 80086ec:	469e      	mov	lr, r3
 80086ee:	4770      	bx	lr

080086f0 <_fini>:
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f2:	bf00      	nop
 80086f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f6:	bc08      	pop	{r3}
 80086f8:	469e      	mov	lr, r3
 80086fa:	4770      	bx	lr
